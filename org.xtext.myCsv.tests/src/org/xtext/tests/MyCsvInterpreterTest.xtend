/*
 * generated by Xtext 2.23.0
 */
package org.xtext.tests

import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.myCsv.Program
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import org.xtext.MyCsvStandaloneSetupGenerated
import java.io.File
import java.util.Scanner
import org.xtext.generator.MyCsvInterpreter

@ExtendWith(InjectionExtension)
@InjectWith(MyCsvInjectorProvider)
class MyCsvInterpreterTest {
	
	@Test
	def void interpreterTest() {

		val File directoryPath = new File("examples/tests/")
		val s = new Scanner(System.in);
		
		val interpreter = new MyCsvInterpreter
		
		// Runtime settings
		val String mainPath = System.getProperty("user.dir")
		val String interpreterPath = new File("examples-gen/interpreter").absolutePath
		
		println("----------TESTS----------")
		println("<Please print enter between each tests>")
			
		for (testFile : directoryPath.list())
		{
			
			val basename= testFile.substring(0, testFile.indexOf("."))
			val inputMyCsv= "examples/tests/"+basename+".mycsv"
			
			try{	
			
				println("TESTING "+ basename +"...")
				s.nextLine()
				
					
				val prog= loadMyCSV(URI.createURI(inputMyCsv))
				Assertions.assertNotNull(prog)
				val errors = prog.eResource.errors
				if(!errors.isEmpty){print("!!!! ERROR PARSER!!!\n")}//Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
				else{
					// changing context
					System.setProperty("user.dir", interpreterPath)
					
					// EXECUTE INTERPRETER	
					interpreter.interpretProgram(prog)
					// restoring context
					System.setProperty("user.dir", mainPath)
				}
				print("DONE\n")
				
			} catch (Exception e) {
				System.out.println("ERROR: test of " + basename + " aborted:\n"+e+"\n");
				e.printStackTrace
				Assertions.fail("Exception occured.")
			}
		}
	}
	
	def loadMyCSV(URI uri){
		new MyCsvStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res= new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as Program
	}
}
