/*
 * generated by Xtext 2.23.0
 */
package org.xtext.tests

import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.myCsv.Program
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import org.xtext.MyCsvStandaloneSetupGenerated
import org.xtext.generator.MyCsvPrettyPrinter
import org.xtext.generator.MyCsvPrettyPrinterDraft

@ExtendWith(InjectionExtension)
@InjectWith(MyCsvInjectorProvider)
class MyCsvPrettyPrintingTest {
	/*return "<exprCalcUnary>"
	@Inject
	ParseHelper<Program> parseHelper
	*/
	
	@Test
	def void loadModel() {
		/*val result = parseHelper.parse('''
			Load "mycsv.csv"
			Load "mycsv12.csv" sep="'"
			ExportJson "mycsv12.json"
			Projection 1 2   33
			Load "mycsv2.csv" noheader
			Store "ici"
			Store "labas" sep="("
		''')*/
		val result= loadMyCSV(URI.createURI("examples/test1.mycsv"))
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		//val prettyPrinter = new MyCsvPrettyPrinter
		//print(prettyPrinter.visit(result))
		val prettyPrinter = new MyCsvPrettyPrinterDraft	
		prettyPrinter.prettyPrint(result)
	}
	
	def loadMyCSV(URI uri){
		new MyCsvStandaloneSetupGenerated().createInjectorAndDoEMFRegistration()
		var res= new ResourceSetImpl().getResource(uri, true);
		res.contents.get(0) as Program
	}
}
