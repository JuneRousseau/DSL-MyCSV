/**
 * generated by Xtext 2.23.0
 */
package org.xtext.tests;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.MyCsvStandaloneSetupGenerated;
import org.xtext.generator.MyCsvCompilerBash;
import org.xtext.generator.MyCsvCompilerPython;
import org.xtext.generator.MyCsvInterpreter;
import org.xtext.myCsv.Program;
import org.xtext.tests.MyCsvInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyCsvInjectorProvider.class)
@SuppressWarnings("all")
public class MyCsvBenchmarkTest {
  @Test
  public void compileTests() {
    final File directoryPath = new File("examples/tests/");
    InputOutput.<String>println("----------TESTS----------");
    final MyCsvCompilerPython pythonCompiler = new MyCsvCompilerPython();
    final MyCsvCompilerBash bashCompiler = new MyCsvCompilerBash();
    final MyCsvInterpreter interpreter = new MyCsvInterpreter();
    String line = null;
    final PrintStream mainOut = System.out;
    final String mainPath = System.getProperty("user.dir");
    final String interpreterPath = new File("examples-gen/interpreter").getAbsolutePath();
    String[] _list = directoryPath.list();
    for (final String testFile : _list) {
      {
        final String basename = testFile.substring(0, testFile.indexOf("."));
        String _substring = basename.substring("test".length(), basename.length());
        final String outputBasename = ("output" + _substring);
        try {
          InputOutput.<String>println((("TESTING " + basename) + "..."));
          final String inputMyCsv = (("examples/tests/" + basename) + ".mycsv");
          final String compiledPyPath = (("examples-gen/python/" + basename) + ".py");
          final String compiledShPath = (("examples-gen/bash/" + basename) + ".sh");
          final String stdoutPyPath = (("examples-gen/stdout/" + basename) + "-Py.stdout.txt");
          final String stdoutShPath = (("examples-gen/stdout/" + basename) + "-Sh.stdout.txt");
          final String stdoutInterpreterPath = (("examples-gen/stdout/" + basename) + "-Interpreter.stdout.txt");
          final String outputPyPath = (("examples-gen/python/" + outputBasename) + ".csv");
          final String outputShPath = (("examples-gen/bash/" + outputBasename) + ".csv");
          final String outputInterpreterPath = (("examples-gen/interpreter/" + outputBasename) + ".csv");
          final Program prog = this.loadMyCSV(URI.createURI(inputMyCsv));
          Assertions.assertNotNull(prog);
          final EList<Resource.Diagnostic> errors = prog.eResource().getErrors();
          boolean _isEmpty = errors.isEmpty();
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("Unexpected errors: ");
          String _join = IterableExtensions.join(errors, ", ");
          _builder.append(_join);
          Assertions.assertTrue(_isEmpty, _builder.toString());
          final String compiledPy = pythonCompiler.compile(prog);
          final String compiledSh = bashCompiler.compile(prog);
          Files.writeString(Paths.get(compiledPyPath), compiledPy, StandardCharsets.UTF_8);
          Files.writeString(Paths.get(compiledShPath), compiledSh, StandardCharsets.UTF_8);
          final Runtime rt = Runtime.getRuntime();
          final String cmdExecPy = (("python3 " + basename) + ".py");
          final String cmdExecSh = (("./" + basename) + ".sh");
          final File bashFile = new File(compiledShPath);
          bashFile.setExecutable(true);
          File _file = new File("examples-gen/python");
          final Process prPy = rt.exec(cmdExecPy, null, _file);
          InputStream _inputStream = prPy.getInputStream();
          InputStreamReader _inputStreamReader = new InputStreamReader(_inputStream);
          final BufferedReader bfrPy = new BufferedReader(_inputStreamReader);
          StringBuilder stdoutPy = new StringBuilder();
          while (((line = bfrPy.readLine()) != null)) {
            stdoutPy.append((line + "\n"));
          }
          Files.writeString(Paths.get(stdoutPyPath), stdoutPy.toString(), StandardCharsets.UTF_8);
          File _file_1 = new File("examples-gen/bash");
          final Process prSh = rt.exec(cmdExecSh, null, _file_1);
          InputStream _inputStream_1 = prSh.getInputStream();
          InputStreamReader _inputStreamReader_1 = new InputStreamReader(_inputStream_1);
          final BufferedReader bfrSh = new BufferedReader(_inputStreamReader_1);
          StringBuilder stdoutSh = new StringBuilder();
          while (((line = bfrSh.readLine()) != null)) {
            stdoutSh.append((line + "\n"));
          }
          Files.writeString(Paths.get(stdoutShPath), stdoutSh.toString(), StandardCharsets.UTF_8);
          System.setProperty("user.dir", interpreterPath);
          final PrintStream outStream = new PrintStream(stdoutInterpreterPath);
          System.setOut(outStream);
          int interpReturnCode = 0;
          try {
            interpreter.interpretProgram(prog);
            outStream.flush();
          } catch (final Throwable _t) {
            if (_t instanceof Exception) {
              interpReturnCode = 1;
            } else {
              throw Exceptions.sneakyThrow(_t);
            }
          }
          System.setOut(mainOut);
          System.setProperty("user.dir", mainPath);
          int _waitFor = prPy.waitFor();
          boolean _equals = (_waitFor == 0);
          Assertions.assertEquals(Boolean.valueOf((interpReturnCode == 0)), Boolean.valueOf(_equals));
          Assertions.assertTrue(this.compareOutput(outputInterpreterPath, outputPyPath));
          InputOutput.<String>println("DONE\n");
        } catch (final Throwable _t) {
          if (_t instanceof Exception) {
            final Exception e = (Exception)_t;
            System.out.println((((("ERROR: test of " + basename) + " aborted:\n") + e) + "\n"));
            e.printStackTrace();
            Assertions.<String>fail("Exception occured.");
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      }
    }
  }
  
  public boolean compareOutput(final String outPath1, final String outPath2) {
    try {
      if (((!new File(outPath1).exists()) && (!new File(outPath2).exists()))) {
        return true;
      }
      final String diffCmd = ((("diff -N -Z " + outPath1) + " ") + outPath2);
      final Process prDiff = Runtime.getRuntime().exec(diffCmd);
      InputStream _inputStream = prDiff.getInputStream();
      InputStreamReader _inputStreamReader = new InputStreamReader(_inputStream);
      final BufferedReader bfrSh = new BufferedReader(_inputStreamReader);
      while ((bfrSh.readLine() != null)) {
      }
      int _waitFor = prDiff.waitFor();
      return (_waitFor == 0);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public Program loadMyCSV(final URI uri) {
    Program _xblockexpression = null;
    {
      new MyCsvStandaloneSetupGenerated().createInjectorAndDoEMFRegistration();
      Resource res = new ResourceSetImpl().getResource(uri, true);
      EObject _get = res.getContents().get(0);
      _xblockexpression = ((Program) _get);
    }
    return _xblockexpression;
  }
}
