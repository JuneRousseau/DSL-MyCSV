/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyCsv;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.MyCsvGrammarAccess;

}
@parser::members {
	private MyCsvGrammarAccess grammarAccess;

	public void setGrammarAccess(MyCsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getProgramAccess().getStmtsAssignment()); }
			(rule__Program__StmtsAssignment)
			{ after(grammarAccess.getProgramAccess().getStmtsAssignment()); }
		)
		(
			{ before(grammarAccess.getProgramAccess().getStmtsAssignment()); }
			(rule__Program__StmtsAssignment)*
			{ after(grammarAccess.getProgramAccess().getStmtsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineIndex
entryRuleLineIndex
:
{ before(grammarAccess.getLineIndexRule()); }
	 ruleLineIndex
{ after(grammarAccess.getLineIndexRule()); } 
	 EOF 
;

// Rule LineIndex
ruleLineIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineIndexAccess().getAlternatives()); }
		(rule__LineIndex__Alternatives)
		{ after(grammarAccess.getLineIndexAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineIndexCond
entryRuleLineIndexCond
:
{ before(grammarAccess.getLineIndexCondRule()); }
	 ruleLineIndexCond
{ after(grammarAccess.getLineIndexCondRule()); } 
	 EOF 
;

// Rule LineIndexCond
ruleLineIndexCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineIndexCondAccess().getCondAssignment()); }
		(rule__LineIndexCond__CondAssignment)
		{ after(grammarAccess.getLineIndexCondAccess().getCondAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLineIndexNum
entryRuleLineIndexNum
:
{ before(grammarAccess.getLineIndexNumRule()); }
	 ruleLineIndexNum
{ after(grammarAccess.getLineIndexNumRule()); } 
	 EOF 
;

// Rule LineIndexNum
ruleLineIndexNum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getLineIndexNumAccess().getLinesAssignment()); }
			(rule__LineIndexNum__LinesAssignment)
			{ after(grammarAccess.getLineIndexNumAccess().getLinesAssignment()); }
		)
		(
			{ before(grammarAccess.getLineIndexNumAccess().getLinesAssignment()); }
			(rule__LineIndexNum__LinesAssignment)*
			{ after(grammarAccess.getLineIndexNumAccess().getLinesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldIndex
entryRuleFieldIndex
:
{ before(grammarAccess.getFieldIndexRule()); }
	 ruleFieldIndex
{ after(grammarAccess.getFieldIndexRule()); } 
	 EOF 
;

// Rule FieldIndex
ruleFieldIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldIndexAccess().getAlternatives()); }
		(rule__FieldIndex__Alternatives)
		{ after(grammarAccess.getFieldIndexAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldIndexName
entryRuleFieldIndexName
:
{ before(grammarAccess.getFieldIndexNameRule()); }
	 ruleFieldIndexName
{ after(grammarAccess.getFieldIndexNameRule()); } 
	 EOF 
;

// Rule FieldIndexName
ruleFieldIndexName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getFieldIndexNameAccess().getFieldsAssignment()); }
			(rule__FieldIndexName__FieldsAssignment)
			{ after(grammarAccess.getFieldIndexNameAccess().getFieldsAssignment()); }
		)
		(
			{ before(grammarAccess.getFieldIndexNameAccess().getFieldsAssignment()); }
			(rule__FieldIndexName__FieldsAssignment)*
			{ after(grammarAccess.getFieldIndexNameAccess().getFieldsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldIndexNum
entryRuleFieldIndexNum
:
{ before(grammarAccess.getFieldIndexNumRule()); }
	 ruleFieldIndexNum
{ after(grammarAccess.getFieldIndexNumRule()); } 
	 EOF 
;

// Rule FieldIndexNum
ruleFieldIndexNum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getFieldIndexNumAccess().getColumnsAssignment()); }
			(rule__FieldIndexNum__ColumnsAssignment)
			{ after(grammarAccess.getFieldIndexNumAccess().getColumnsAssignment()); }
		)
		(
			{ before(grammarAccess.getFieldIndexNumAccess().getColumnsAssignment()); }
			(rule__FieldIndexNum__ColumnsAssignment)*
			{ after(grammarAccess.getFieldIndexNumAccess().getColumnsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellIndex
entryRuleCellIndex
:
{ before(grammarAccess.getCellIndexRule()); }
	 ruleCellIndex
{ after(grammarAccess.getCellIndexRule()); } 
	 EOF 
;

// Rule CellIndex
ruleCellIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellIndexAccess().getGroup()); }
		(rule__CellIndex__Group__0)
		{ after(grammarAccess.getCellIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValues
entryRuleValues
:
{ before(grammarAccess.getValuesRule()); }
	 ruleValues
{ after(grammarAccess.getValuesRule()); } 
	 EOF 
;

// Rule Values
ruleValues 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValuesAccess().getGroup()); }
		(rule__Values__Group__0)
		{ after(grammarAccess.getValuesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePath
entryRulePath
:
{ before(grammarAccess.getPathRule()); }
	 rulePath
{ after(grammarAccess.getPathRule()); } 
	 EOF 
;

// Rule Path
rulePath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathAccess().getValueAssignment()); }
		(rule__Path__ValueAssignment)
		{ after(grammarAccess.getPathAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getValueAssignment()); }
		(rule__Field__ValueAssignment)
		{ after(grammarAccess.getFieldAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoad
entryRuleLoad
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadAccess().getGroup()); }
		(rule__Load__Group__0)
		{ after(grammarAccess.getLoadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getGroup()); }
		(rule__Store__Group__0)
		{ after(grammarAccess.getStoreAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExportJson
entryRuleExportJson
:
{ before(grammarAccess.getExportJsonRule()); }
	 ruleExportJson
{ after(grammarAccess.getExportJsonRule()); } 
	 EOF 
;

// Rule ExportJson
ruleExportJson 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportJsonAccess().getGroup()); }
		(rule__ExportJson__Group__0)
		{ after(grammarAccess.getExportJsonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProjection
entryRuleProjection
:
{ before(grammarAccess.getProjectionRule()); }
	 ruleProjection
{ after(grammarAccess.getProjectionRule()); } 
	 EOF 
;

// Rule Projection
ruleProjection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectionAccess().getGroup()); }
		(rule__Projection__Group__0)
		{ after(grammarAccess.getProjectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getGroup()); }
		(rule__Select__Group__0)
		{ after(grammarAccess.getSelectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelete
entryRuleDelete
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAccess().getGroup()); }
		(rule__Delete__Group__0)
		{ after(grammarAccess.getDeleteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeleteLine
entryRuleDeleteLine
:
{ before(grammarAccess.getDeleteLineRule()); }
	 ruleDeleteLine
{ after(grammarAccess.getDeleteLineRule()); } 
	 EOF 
;

// Rule DeleteLine
ruleDeleteLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteLineAccess().getGroup()); }
		(rule__DeleteLine__Group__0)
		{ after(grammarAccess.getDeleteLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeleteField
entryRuleDeleteField
:
{ before(grammarAccess.getDeleteFieldRule()); }
	 ruleDeleteField
{ after(grammarAccess.getDeleteFieldRule()); } 
	 EOF 
;

// Rule DeleteField
ruleDeleteField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteFieldAccess().getGroup()); }
		(rule__DeleteField__Group__0)
		{ after(grammarAccess.getDeleteFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getGroup()); }
		(rule__Insert__Group__0)
		{ after(grammarAccess.getInsertAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsertLine
entryRuleInsertLine
:
{ before(grammarAccess.getInsertLineRule()); }
	 ruleInsertLine
{ after(grammarAccess.getInsertLineRule()); } 
	 EOF 
;

// Rule InsertLine
ruleInsertLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertLineAccess().getGroup()); }
		(rule__InsertLine__Group__0)
		{ after(grammarAccess.getInsertLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsertField
entryRuleInsertField
:
{ before(grammarAccess.getInsertFieldRule()); }
	 ruleInsertField
{ after(grammarAccess.getInsertFieldRule()); } 
	 EOF 
;

// Rule InsertField
ruleInsertField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertFieldAccess().getGroup()); }
		(rule__InsertField__Group__0)
		{ after(grammarAccess.getInsertFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModify
entryRuleModify
:
{ before(grammarAccess.getModifyRule()); }
	 ruleModify
{ after(grammarAccess.getModifyRule()); } 
	 EOF 
;

// Rule Modify
ruleModify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifyAccess().getGroup()); }
		(rule__Modify__Group__0)
		{ after(grammarAccess.getModifyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifyLine
entryRuleModifyLine
:
{ before(grammarAccess.getModifyLineRule()); }
	 ruleModifyLine
{ after(grammarAccess.getModifyLineRule()); } 
	 EOF 
;

// Rule ModifyLine
ruleModifyLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifyLineAccess().getGroup()); }
		(rule__ModifyLine__Group__0)
		{ after(grammarAccess.getModifyLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifyField
entryRuleModifyField
:
{ before(grammarAccess.getModifyFieldRule()); }
	 ruleModifyField
{ after(grammarAccess.getModifyFieldRule()); } 
	 EOF 
;

// Rule ModifyField
ruleModifyField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifyFieldAccess().getGroup()); }
		(rule__ModifyField__Group__0)
		{ after(grammarAccess.getModifyFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifyCell
entryRuleModifyCell
:
{ before(grammarAccess.getModifyCellRule()); }
	 ruleModifyCell
{ after(grammarAccess.getModifyCellRule()); } 
	 EOF 
;

// Rule ModifyCell
ruleModifyCell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifyCellAccess().getGroup()); }
		(rule__ModifyCell__Group__0)
		{ after(grammarAccess.getModifyCellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintLine
entryRulePrintLine
:
{ before(grammarAccess.getPrintLineRule()); }
	 rulePrintLine
{ after(grammarAccess.getPrintLineRule()); } 
	 EOF 
;

// Rule PrintLine
rulePrintLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintLineAccess().getGroup()); }
		(rule__PrintLine__Group__0)
		{ after(grammarAccess.getPrintLineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintField
entryRulePrintField
:
{ before(grammarAccess.getPrintFieldRule()); }
	 rulePrintField
{ after(grammarAccess.getPrintFieldRule()); } 
	 EOF 
;

// Rule PrintField
rulePrintField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintFieldAccess().getGroup()); }
		(rule__PrintField__Group__0)
		{ after(grammarAccess.getPrintFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintCell
entryRulePrintCell
:
{ before(grammarAccess.getPrintCellRule()); }
	 rulePrintCell
{ after(grammarAccess.getPrintCellRule()); } 
	 EOF 
;

// Rule PrintCell
rulePrintCell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintCellAccess().getGroup()); }
		(rule__PrintCell__Group__0)
		{ after(grammarAccess.getPrintCellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintTable
entryRulePrintTable
:
{ before(grammarAccess.getPrintTableRule()); }
	 rulePrintTable
{ after(grammarAccess.getPrintTableRule()); } 
	 EOF 
;

// Rule PrintTable
rulePrintTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintTableAccess().getTableKeyword()); }
		'table'
		{ after(grammarAccess.getPrintTableAccess().getTableKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintExpr
entryRulePrintExpr
:
{ before(grammarAccess.getPrintExprRule()); }
	 rulePrintExpr
{ after(grammarAccess.getPrintExprRule()); } 
	 EOF 
;

// Rule PrintExpr
rulePrintExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintExprAccess().getGroup()); }
		(rule__PrintExpr__Group__0)
		{ after(grammarAccess.getPrintExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionLog
entryRuleExpressionLog
:
{ before(grammarAccess.getExpressionLogRule()); }
	 ruleExpressionLog
{ after(grammarAccess.getExpressionLogRule()); } 
	 EOF 
;

// Rule ExpressionLog
ruleExpressionLog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionLogAccess().getExprAssignment()); }
		(rule__ExpressionLog__ExprAssignment)
		{ after(grammarAccess.getExpressionLogAccess().getExprAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryLogExpression
entryRuleUnaryLogExpression
:
{ before(grammarAccess.getUnaryLogExpressionRule()); }
	 ruleUnaryLogExpression
{ after(grammarAccess.getUnaryLogExpressionRule()); } 
	 EOF 
;

// Rule UnaryLogExpression
ruleUnaryLogExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryLogExpressionAccess().getGroup()); }
		(rule__UnaryLogExpression__Group__0)
		{ after(grammarAccess.getUnaryLogExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionLogPrimary
entryRuleExpressionLogPrimary
:
{ before(grammarAccess.getExpressionLogPrimaryRule()); }
	 ruleExpressionLogPrimary
{ after(grammarAccess.getExpressionLogPrimaryRule()); } 
	 EOF 
;

// Rule ExpressionLogPrimary
ruleExpressionLogPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionLogPrimaryAccess().getAlternatives()); }
		(rule__ExpressionLogPrimary__Alternatives)
		{ after(grammarAccess.getExpressionLogPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNestedLogExpression
entryRuleNestedLogExpression
:
{ before(grammarAccess.getNestedLogExpressionRule()); }
	 ruleNestedLogExpression
{ after(grammarAccess.getNestedLogExpressionRule()); } 
	 EOF 
;

// Rule NestedLogExpression
ruleNestedLogExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNestedLogExpressionAccess().getGroup()); }
		(rule__NestedLogExpression__Group__0)
		{ after(grammarAccess.getNestedLogExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionRel
entryRuleExpressionRel
:
{ before(grammarAccess.getExpressionRelRule()); }
	 ruleExpressionRel
{ after(grammarAccess.getExpressionRelRule()); } 
	 EOF 
;

// Rule ExpressionRel
ruleExpressionRel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionRelAccess().getGroup()); }
		(rule__ExpressionRel__Group__0)
		{ after(grammarAccess.getExpressionRelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionCalcul
entryRuleExpressionCalcul
:
{ before(grammarAccess.getExpressionCalculRule()); }
	 ruleExpressionCalcul
{ after(grammarAccess.getExpressionCalculRule()); } 
	 EOF 
;

// Rule ExpressionCalcul
ruleExpressionCalcul 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionCalculAccess().getExprAssignment()); }
		(rule__ExpressionCalcul__ExprAssignment)
		{ after(grammarAccess.getExpressionCalculAccess().getExprAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpressionRhs
entryRuleAdditiveExpressionRhs
:
{ before(grammarAccess.getAdditiveExpressionRhsRule()); }
	 ruleAdditiveExpressionRhs
{ after(grammarAccess.getAdditiveExpressionRhsRule()); } 
	 EOF 
;

// Rule AdditiveExpressionRhs
ruleAdditiveExpressionRhs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionRhsAccess().getGroup()); }
		(rule__AdditiveExpressionRhs__Group__0)
		{ after(grammarAccess.getAdditiveExpressionRhsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpressionRhs
entryRuleMultiplicativeExpressionRhs
:
{ before(grammarAccess.getMultiplicativeExpressionRhsRule()); }
	 ruleMultiplicativeExpressionRhs
{ after(grammarAccess.getMultiplicativeExpressionRhsRule()); } 
	 EOF 
;

// Rule MultiplicativeExpressionRhs
ruleMultiplicativeExpressionRhs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionRhsAccess().getGroup()); }
		(rule__MultiplicativeExpressionRhs__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionRhsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
		(rule__UnaryExpression__Group__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressionCalculPrimary
entryRuleExpressionCalculPrimary
:
{ before(grammarAccess.getExpressionCalculPrimaryRule()); }
	 ruleExpressionCalculPrimary
{ after(grammarAccess.getExpressionCalculPrimaryRule()); } 
	 EOF 
;

// Rule ExpressionCalculPrimary
ruleExpressionCalculPrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getAlternatives()); }
		(rule__ExpressionCalculPrimary__Alternatives)
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAggregatExpression
entryRuleAggregatExpression
:
{ before(grammarAccess.getAggregatExpressionRule()); }
	 ruleAggregatExpression
{ after(grammarAccess.getAggregatExpressionRule()); } 
	 EOF 
;

// Rule AggregatExpression
ruleAggregatExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAggregatExpressionAccess().getGroup()); }
		(rule__AggregatExpression__Group__0)
		{ after(grammarAccess.getAggregatExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLitteralInt
entryRuleLitteralInt
:
{ before(grammarAccess.getLitteralIntRule()); }
	 ruleLitteralInt
{ after(grammarAccess.getLitteralIntRule()); } 
	 EOF 
;

// Rule LitteralInt
ruleLitteralInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLitteralIntAccess().getValAssignment()); }
		(rule__LitteralInt__ValAssignment)
		{ after(grammarAccess.getLitteralIntAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLitteralFloat
entryRuleLitteralFloat
:
{ before(grammarAccess.getLitteralFloatRule()); }
	 ruleLitteralFloat
{ after(grammarAccess.getLitteralFloatRule()); } 
	 EOF 
;

// Rule LitteralFloat
ruleLitteralFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLitteralFloatAccess().getValAssignment()); }
		(rule__LitteralFloat__ValAssignment)
		{ after(grammarAccess.getLitteralFloatAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLitteralString
entryRuleLitteralString
:
{ before(grammarAccess.getLitteralStringRule()); }
	 ruleLitteralString
{ after(grammarAccess.getLitteralStringRule()); } 
	 EOF 
;

// Rule LitteralString
ruleLitteralString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLitteralStringAccess().getValAssignment()); }
		(rule__LitteralString__ValAssignment)
		{ after(grammarAccess.getLitteralStringAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNestedExpressionCalcul
entryRuleNestedExpressionCalcul
:
{ before(grammarAccess.getNestedExpressionCalculRule()); }
	 ruleNestedExpressionCalcul
{ after(grammarAccess.getNestedExpressionCalculRule()); } 
	 EOF 
;

// Rule NestedExpressionCalcul
ruleNestedExpressionCalcul 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNestedExpressionCalculAccess().getGroup()); }
		(rule__NestedExpressionCalcul__Group__0)
		{ after(grammarAccess.getNestedExpressionCalculAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNbField
entryRuleNbField
:
{ before(grammarAccess.getNbFieldRule()); }
	 ruleNbField
{ after(grammarAccess.getNbFieldRule()); } 
	 EOF 
;

// Rule NbField
ruleNbField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNbFieldAccess().getNbFieldKeyword()); }
		'NbField'
		{ after(grammarAccess.getNbFieldAccess().getNbFieldKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinOpRel
ruleBinOpRel
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpRelAccess().getAlternatives()); }
		(rule__BinOpRel__Alternatives)
		{ after(grammarAccess.getBinOpRelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Aggregat
ruleAggregat
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregatAccess().getAlternatives()); }
		(rule__Aggregat__Alternatives)
		{ after(grammarAccess.getAggregatAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinOpAdd
ruleBinOpAdd
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpAddAccess().getAlternatives()); }
		(rule__BinOpAdd__Alternatives)
		{ after(grammarAccess.getBinOpAddAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BinOpMult
ruleBinOpMult
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpMultAccess().getAlternatives()); }
		(rule__BinOpMult__Alternatives)
		{ after(grammarAccess.getBinOpMultAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineIndex__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineIndexAccess().getLineIndexCondParserRuleCall_0()); }
		ruleLineIndexCond
		{ after(grammarAccess.getLineIndexAccess().getLineIndexCondParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLineIndexAccess().getLineIndexNumParserRuleCall_1()); }
		ruleLineIndexNum
		{ after(grammarAccess.getLineIndexAccess().getLineIndexNumParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldIndex__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldIndexAccess().getFieldIndexNameParserRuleCall_0()); }
		ruleFieldIndexName
		{ after(grammarAccess.getFieldIndexAccess().getFieldIndexNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFieldIndexAccess().getFieldIndexNumParserRuleCall_1()); }
		ruleFieldIndexNum
		{ after(grammarAccess.getFieldIndexAccess().getFieldIndexNumParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellIndexAccess().getColnumAssignment_3_0()); }
		(rule__CellIndex__ColnumAssignment_3_0)
		{ after(grammarAccess.getCellIndexAccess().getColnumAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getCellIndexAccess().getColnameAssignment_3_1()); }
		(rule__CellIndex__ColnameAssignment_3_1)
		{ after(grammarAccess.getCellIndexAccess().getColnameAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getExpressionCalculParserRuleCall_0()); }
		ruleExpressionCalcul
		{ after(grammarAccess.getValueAccess().getExpressionCalculParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getLitteralStringParserRuleCall_1()); }
		ruleLitteralString
		{ after(grammarAccess.getValueAccess().getLitteralStringParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getLoadParserRuleCall_0()); }
		ruleLoad
		{ after(grammarAccess.getStatementAccess().getLoadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStoreParserRuleCall_1()); }
		ruleStore
		{ after(grammarAccess.getStatementAccess().getStoreParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getExportJsonParserRuleCall_2()); }
		ruleExportJson
		{ after(grammarAccess.getStatementAccess().getExportJsonParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getProjectionParserRuleCall_3()); }
		ruleProjection
		{ after(grammarAccess.getStatementAccess().getProjectionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSelectParserRuleCall_4()); }
		ruleSelect
		{ after(grammarAccess.getStatementAccess().getSelectParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDeleteParserRuleCall_5()); }
		ruleDelete
		{ after(grammarAccess.getStatementAccess().getDeleteParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getInsertParserRuleCall_6()); }
		ruleInsert
		{ after(grammarAccess.getStatementAccess().getInsertParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getModifyParserRuleCall_7()); }
		ruleModify
		{ after(grammarAccess.getStatementAccess().getModifyParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPrintParserRuleCall_8()); }
		rulePrint
		{ after(grammarAccess.getStatementAccess().getPrintParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteAccess().getDeleteLineParserRuleCall_1_0()); }
		ruleDeleteLine
		{ after(grammarAccess.getDeleteAccess().getDeleteLineParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeleteAccess().getDeleteFieldParserRuleCall_1_1()); }
		ruleDeleteField
		{ after(grammarAccess.getDeleteAccess().getDeleteFieldParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertAccess().getInsertLineParserRuleCall_1_0()); }
		ruleInsertLine
		{ after(grammarAccess.getInsertAccess().getInsertLineParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getInsertAccess().getInsertFieldParserRuleCall_1_1()); }
		ruleInsertField
		{ after(grammarAccess.getInsertAccess().getInsertFieldParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modify__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyAccess().getModifyLineParserRuleCall_1_0()); }
		ruleModifyLine
		{ after(grammarAccess.getModifyAccess().getModifyLineParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getModifyAccess().getModifyFieldParserRuleCall_1_1()); }
		ruleModifyField
		{ after(grammarAccess.getModifyAccess().getModifyFieldParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getModifyAccess().getModifyCellParserRuleCall_1_2()); }
		ruleModifyCell
		{ after(grammarAccess.getModifyAccess().getModifyCellParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getPrintLineParserRuleCall_1_0()); }
		rulePrintLine
		{ after(grammarAccess.getPrintAccess().getPrintLineParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getPrintFieldParserRuleCall_1_1()); }
		rulePrintField
		{ after(grammarAccess.getPrintAccess().getPrintFieldParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getPrintCellParserRuleCall_1_2()); }
		rulePrintCell
		{ after(grammarAccess.getPrintAccess().getPrintCellParserRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getGroup_1_3()); }
		(rule__Print__Group_1_3__0)
		{ after(grammarAccess.getPrintAccess().getGroup_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getPrintExprParserRuleCall_1_4()); }
		rulePrintExpr
		{ after(grammarAccess.getPrintAccess().getPrintExprParserRuleCall_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionLogPrimary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionLogPrimaryAccess().getExpressionRelParserRuleCall_0()); }
		ruleExpressionRel
		{ after(grammarAccess.getExpressionLogPrimaryAccess().getExpressionRelParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionLogPrimaryAccess().getNestedLogExpressionParserRuleCall_1()); }
		ruleNestedLogExpression
		{ after(grammarAccess.getExpressionLogPrimaryAccess().getNestedLogExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionCalculPrimary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getGroup_0()); }
		(rule__ExpressionCalculPrimary__Group_0__0)
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getAggregatExpressionParserRuleCall_1()); }
		ruleAggregatExpression
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getAggregatExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralIntParserRuleCall_2()); }
		ruleLitteralInt
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralIntParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralFloatParserRuleCall_3()); }
		ruleLitteralFloat
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralFloatParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionCalculPrimaryAccess().getNestedExpressionCalculParserRuleCall_4()); }
		ruleNestedExpressionCalcul
		{ after(grammarAccess.getExpressionCalculPrimaryAccess().getNestedExpressionCalculParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinOpRel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpRelAccess().getGtEnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getBinOpRelAccess().getGtEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpRelAccess().getLtEnumLiteralDeclaration_1()); }
		('<')
		{ after(grammarAccess.getBinOpRelAccess().getLtEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpRelAccess().getGeEnumLiteralDeclaration_2()); }
		('>=')
		{ after(grammarAccess.getBinOpRelAccess().getGeEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpRelAccess().getLeEnumLiteralDeclaration_3()); }
		('<=')
		{ after(grammarAccess.getBinOpRelAccess().getLeEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpRelAccess().getEqEnumLiteralDeclaration_4()); }
		('==')
		{ after(grammarAccess.getBinOpRelAccess().getEqEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpRelAccess().getNeqEnumLiteralDeclaration_5()); }
		('!=')
		{ after(grammarAccess.getBinOpRelAccess().getNeqEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregat__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregatAccess().getCountEnumLiteralDeclaration_0()); }
		('Count')
		{ after(grammarAccess.getAggregatAccess().getCountEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAggregatAccess().getSumEnumLiteralDeclaration_1()); }
		('Sum')
		{ after(grammarAccess.getAggregatAccess().getSumEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAggregatAccess().getProductEnumLiteralDeclaration_2()); }
		('Product')
		{ after(grammarAccess.getAggregatAccess().getProductEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAggregatAccess().getMeanEnumLiteralDeclaration_3()); }
		('Mean')
		{ after(grammarAccess.getAggregatAccess().getMeanEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinOpAdd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpAddAccess().getPlusEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getBinOpAddAccess().getPlusEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAddAccess().getMinusEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getBinOpAddAccess().getMinusEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinOpMult__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpMultAccess().getTimesEnumLiteralDeclaration_0()); }
		('*')
		{ after(grammarAccess.getBinOpMultAccess().getTimesEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpMultAccess().getDivEnumLiteralDeclaration_1()); }
		('/')
		{ after(grammarAccess.getBinOpMultAccess().getDivEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellIndex__Group__0__Impl
	rule__CellIndex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellIndexAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCellIndexAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellIndex__Group__1__Impl
	rule__CellIndex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellIndexAccess().getLineAssignment_1()); }
	(rule__CellIndex__LineAssignment_1)
	{ after(grammarAccess.getCellIndexAccess().getLineAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellIndex__Group__2__Impl
	rule__CellIndex__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellIndexAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getCellIndexAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellIndex__Group__3__Impl
	rule__CellIndex__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellIndexAccess().getAlternatives_3()); }
	(rule__CellIndex__Alternatives_3)
	{ after(grammarAccess.getCellIndexAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellIndex__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellIndexAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getCellIndexAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Values__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group__0__Impl
	rule__Values__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getLeftSquareBracketKeyword_0()); }
	('[')?
	{ after(grammarAccess.getValuesAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group__1__Impl
	rule__Values__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getValuesAssignment_1()); }
	(rule__Values__ValuesAssignment_1)
	{ after(grammarAccess.getValuesAccess().getValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group__2__Impl
	rule__Values__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getGroup_2()); }
	(rule__Values__Group_2__0)*
	{ after(grammarAccess.getValuesAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getRightSquareBracketKeyword_3()); }
	(']')?
	{ after(grammarAccess.getValuesAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Values__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group_2__0__Impl
	rule__Values__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getValuesAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Values__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValuesAccess().getValuesAssignment_2_1()); }
	(rule__Values__ValuesAssignment_2_1)
	{ after(grammarAccess.getValuesAccess().getValuesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__0__Impl
	rule__Load__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getLoadKeyword_0()); }
	'Load'
	{ after(grammarAccess.getLoadAccess().getLoadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__1__Impl
	rule__Load__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getPathAssignment_1()); }
	(rule__Load__PathAssignment_1)
	{ after(grammarAccess.getLoadAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__2__Impl
	rule__Load__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getGroup_2()); }
	(rule__Load__Group_2__0)?
	{ after(grammarAccess.getLoadAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getNoHeaderAssignment_3()); }
	(rule__Load__NoHeaderAssignment_3)?
	{ after(grammarAccess.getLoadAccess().getNoHeaderAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Load__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group_2__0__Impl
	rule__Load__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getSepDefinedAssignment_2_0()); }
	(rule__Load__SepDefinedAssignment_2_0)
	{ after(grammarAccess.getLoadAccess().getSepDefinedAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group_2__1__Impl
	rule__Load__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getEqualsSignKeyword_2_1()); }
	'='
	{ after(grammarAccess.getLoadAccess().getEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Load__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoadAccess().getSepAssignment_2_2()); }
	(rule__Load__SepAssignment_2_2)
	{ after(grammarAccess.getLoadAccess().getSepAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__0__Impl
	rule__Store__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
	'Store'
	{ after(grammarAccess.getStoreAccess().getStoreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__1__Impl
	rule__Store__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getPathAssignment_1()); }
	(rule__Store__PathAssignment_1)
	{ after(grammarAccess.getStoreAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getGroup_2()); }
	(rule__Store__Group_2__0)?
	{ after(grammarAccess.getStoreAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Store__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group_2__0__Impl
	rule__Store__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getSepDefinedAssignment_2_0()); }
	(rule__Store__SepDefinedAssignment_2_0)
	{ after(grammarAccess.getStoreAccess().getSepDefinedAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group_2__1__Impl
	rule__Store__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getEqualsSignKeyword_2_1()); }
	'='
	{ after(grammarAccess.getStoreAccess().getEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Store__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoreAccess().getSepAssignment_2_2()); }
	(rule__Store__SepAssignment_2_2)
	{ after(grammarAccess.getStoreAccess().getSepAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExportJson__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportJson__Group__0__Impl
	rule__ExportJson__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJson__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportJsonAccess().getExportJsonKeyword_0()); }
	'ExportJson'
	{ after(grammarAccess.getExportJsonAccess().getExportJsonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJson__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExportJson__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJson__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExportJsonAccess().getPathAssignment_1()); }
	(rule__ExportJson__PathAssignment_1)
	{ after(grammarAccess.getExportJsonAccess().getPathAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Projection__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Projection__Group__0__Impl
	rule__Projection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectionAccess().getProjectionKeyword_0()); }
	'Projection'
	{ after(grammarAccess.getProjectionAccess().getProjectionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Projection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProjectionAccess().getFieldAssignment_1()); }
	(rule__Projection__FieldAssignment_1)
	{ after(grammarAccess.getProjectionAccess().getFieldAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Select__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__0__Impl
	rule__Select__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
	'Select'
	{ after(grammarAccess.getSelectAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Select__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectAccess().getLineAssignment_1()); }
	(rule__Select__LineAssignment_1)
	{ after(grammarAccess.getSelectAccess().getLineAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delete__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__0__Impl
	rule__Delete__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }
	'Delete'
	{ after(grammarAccess.getDeleteAccess().getDeleteKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delete__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteAccess().getAlternatives_1()); }
	(rule__Delete__Alternatives_1)
	{ after(grammarAccess.getDeleteAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteLine__Group__0__Impl
	rule__DeleteLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteLineAccess().getLineKeyword_0()); }
	'line'
	{ after(grammarAccess.getDeleteLineAccess().getLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteLineAccess().getLinesAssignment_1()); }
	(rule__DeleteLine__LinesAssignment_1)
	{ after(grammarAccess.getDeleteLineAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeleteField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteField__Group__0__Impl
	rule__DeleteField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteFieldAccess().getFieldKeyword_0()); }
	'field'
	{ after(grammarAccess.getDeleteFieldAccess().getFieldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeleteField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeleteFieldAccess().getFieldsAssignment_1()); }
	(rule__DeleteField__FieldsAssignment_1)
	{ after(grammarAccess.getDeleteFieldAccess().getFieldsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Insert__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__0__Impl
	rule__Insert__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
	'Insert'
	{ after(grammarAccess.getInsertAccess().getInsertKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Insert__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Insert__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertAccess().getAlternatives_1()); }
	(rule__Insert__Alternatives_1)
	{ after(grammarAccess.getInsertAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__0__Impl
	rule__InsertLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getLineKeyword_0()); }
	'line'
	{ after(grammarAccess.getInsertLineAccess().getLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertLineAccess().getValuesAssignment_1()); }
	(rule__InsertLine__ValuesAssignment_1)
	{ after(grammarAccess.getInsertLineAccess().getValuesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InsertField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertField__Group__0__Impl
	rule__InsertField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertFieldAccess().getFieldKeyword_0()); }
	'field'
	{ after(grammarAccess.getInsertFieldAccess().getFieldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertField__Group__1__Impl
	rule__InsertField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertFieldAccess().getFieldnameAssignment_1()); }
	(rule__InsertField__FieldnameAssignment_1)
	{ after(grammarAccess.getInsertFieldAccess().getFieldnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertField__Group__2__Impl
	rule__InsertField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertFieldAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getInsertFieldAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InsertField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInsertFieldAccess().getValuesAssignment_3()); }
	(rule__InsertField__ValuesAssignment_3)
	{ after(grammarAccess.getInsertFieldAccess().getValuesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Modify__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modify__Group__0__Impl
	rule__Modify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Modify__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyAccess().getModifyKeyword_0()); }
	'Modify'
	{ after(grammarAccess.getModifyAccess().getModifyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modify__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Modify__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Modify__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyAccess().getAlternatives_1()); }
	(rule__Modify__Alternatives_1)
	{ after(grammarAccess.getModifyAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyLine__Group__0__Impl
	rule__ModifyLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyLineAccess().getLineKeyword_0()); }
	'line'
	{ after(grammarAccess.getModifyLineAccess().getLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyLine__Group__1__Impl
	rule__ModifyLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyLineAccess().getLinesAssignment_1()); }
	(rule__ModifyLine__LinesAssignment_1)
	{ after(grammarAccess.getModifyLineAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyLine__Group__2__Impl
	rule__ModifyLine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyLineAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getModifyLineAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyLine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyLineAccess().getValuesAssignment_3()); }
	(rule__ModifyLine__ValuesAssignment_3)
	{ after(grammarAccess.getModifyLineAccess().getValuesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyField__Group__0__Impl
	rule__ModifyField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyFieldAccess().getFieldKeyword_0()); }
	'field'
	{ after(grammarAccess.getModifyFieldAccess().getFieldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyField__Group__1__Impl
	rule__ModifyField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyFieldAccess().getFieldsAssignment_1()); }
	(rule__ModifyField__FieldsAssignment_1)
	{ after(grammarAccess.getModifyFieldAccess().getFieldsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyField__Group__2__Impl
	rule__ModifyField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyFieldAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getModifyFieldAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyFieldAccess().getValuesAssignment_3()); }
	(rule__ModifyField__ValuesAssignment_3)
	{ after(grammarAccess.getModifyFieldAccess().getValuesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ModifyCell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyCell__Group__0__Impl
	rule__ModifyCell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyCellAccess().getCellKeyword_0()); }
	'cell'
	{ after(grammarAccess.getModifyCellAccess().getCellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyCell__Group__1__Impl
	rule__ModifyCell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyCellAccess().getCellAssignment_1()); }
	(rule__ModifyCell__CellAssignment_1)
	{ after(grammarAccess.getModifyCellAccess().getCellAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyCell__Group__2__Impl
	rule__ModifyCell__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyCellAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getModifyCellAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ModifyCell__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModifyCellAccess().getValueAssignment_3()); }
	(rule__ModifyCell__ValueAssignment_3)
	{ after(grammarAccess.getModifyCellAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'Print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getAlternatives_1()); }
	(rule__Print__Alternatives_1)
	{ after(grammarAccess.getPrintAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1_3__0__Impl
	rule__Print__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintTableAction_1_3_0()); }
	()
	{ after(grammarAccess.getPrintAccess().getPrintTableAction_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintTableParserRuleCall_1_3_1()); }
	rulePrintTable
	{ after(grammarAccess.getPrintAccess().getPrintTableParserRuleCall_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintLine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintLine__Group__0__Impl
	rule__PrintLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintLine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintLineAccess().getLineKeyword_0()); }
	'line'
	{ after(grammarAccess.getPrintLineAccess().getLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintLine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintLine__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintLine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintLineAccess().getLinesAssignment_1()); }
	(rule__PrintLine__LinesAssignment_1)
	{ after(grammarAccess.getPrintLineAccess().getLinesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintField__Group__0__Impl
	rule__PrintField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintFieldAccess().getFieldKeyword_0()); }
	'field'
	{ after(grammarAccess.getPrintFieldAccess().getFieldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintFieldAccess().getFieldsAssignment_1()); }
	(rule__PrintField__FieldsAssignment_1)
	{ after(grammarAccess.getPrintFieldAccess().getFieldsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintCell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCell__Group__0__Impl
	rule__PrintCell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCellAccess().getCellKeyword_0()); }
	'cell'
	{ after(grammarAccess.getPrintCellAccess().getCellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintCell__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintCellAccess().getCellAssignment_1()); }
	(rule__PrintCell__CellAssignment_1)
	{ after(grammarAccess.getPrintCellAccess().getCellAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpr__Group__0__Impl
	rule__PrintExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExprAccess().getExprKeyword_0()); }
	'expr'
	{ after(grammarAccess.getPrintExprAccess().getExprKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintExprAccess().getExpAssignment_1()); }
	(rule__PrintExpr__ExpAssignment_1)
	{ after(grammarAccess.getPrintExprAccess().getExpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getLhsAssignment_0()); }
	(rule__OrExpression__LhsAssignment_0)
	{ after(grammarAccess.getOrExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrKeyword_1_0()); }
	'or'
	{ after(grammarAccess.getOrExpressionAccess().getOrKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_1()); }
	(rule__OrExpression__RhsAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getLhsAssignment_0()); }
	(rule__AndExpression__LhsAssignment_0)
	{ after(grammarAccess.getAndExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndKeyword_1_0()); }
	'and'
	{ after(grammarAccess.getAndExpressionAccess().getAndKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_1()); }
	(rule__AndExpression__RhsAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryLogExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryLogExpression__Group__0__Impl
	rule__UnaryLogExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryLogExpressionAccess().getNotAssignment_0()); }
	(rule__UnaryLogExpression__NotAssignment_0)?
	{ after(grammarAccess.getUnaryLogExpressionAccess().getNotAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryLogExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryLogExpressionAccess().getExprAssignment_1()); }
	(rule__UnaryLogExpression__ExprAssignment_1)
	{ after(grammarAccess.getUnaryLogExpressionAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NestedLogExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedLogExpression__Group__0__Impl
	rule__NestedLogExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedLogExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getNestedLogExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedLogExpression__Group__1__Impl
	rule__NestedLogExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedLogExpressionAccess().getExprAssignment_1()); }
	(rule__NestedLogExpression__ExprAssignment_1)
	{ after(grammarAccess.getNestedLogExpressionAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedLogExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedLogExpressionAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getNestedLogExpressionAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionRel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionRel__Group__0__Impl
	rule__ExpressionRel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionRelAccess().getFieldAssignment_0()); }
	(rule__ExpressionRel__FieldAssignment_0)
	{ after(grammarAccess.getExpressionRelAccess().getFieldAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionRel__Group__1__Impl
	rule__ExpressionRel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionRelAccess().getOpAssignment_1()); }
	(rule__ExpressionRel__OpAssignment_1)
	{ after(grammarAccess.getExpressionRelAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionRel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionRelAccess().getValAssignment_2()); }
	(rule__ExpressionRel__ValAssignment_2)
	{ after(grammarAccess.getExpressionRelAccess().getValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getLhsAssignment_0()); }
	(rule__AdditiveExpression__LhsAssignment_0)
	{ after(grammarAccess.getAdditiveExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1()); }
	(rule__AdditiveExpression__RhsAssignment_1)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpressionRhs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpressionRhs__Group__0__Impl
	rule__AdditiveExpressionRhs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionRhs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionRhsAccess().getOpAssignment_0()); }
	(rule__AdditiveExpressionRhs__OpAssignment_0)
	{ after(grammarAccess.getAdditiveExpressionRhsAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionRhs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpressionRhs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionRhs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionRhsAccess().getRhsAssignment_1()); }
	(rule__AdditiveExpressionRhs__RhsAssignment_1)
	{ after(grammarAccess.getAdditiveExpressionRhsAccess().getRhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getLhsAssignment_0()); }
	(rule__MultiplicativeExpression__LhsAssignment_0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1()); }
	(rule__MultiplicativeExpression__RhsAssignment_1)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpressionRhs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpressionRhs__Group__0__Impl
	rule__MultiplicativeExpressionRhs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionRhs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpAssignment_0()); }
	(rule__MultiplicativeExpressionRhs__OpAssignment_0)
	{ after(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionRhs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpressionRhs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionRhs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsAssignment_1()); }
	(rule__MultiplicativeExpressionRhs__RhsAssignment_1)
	{ after(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
	(rule__UnaryExpression__OpAssignment_0)?
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
	(rule__UnaryExpression__ExprAssignment_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionCalculPrimary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionCalculPrimary__Group_0__0__Impl
	rule__ExpressionCalculPrimary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionCalculPrimary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldAction_0_0()); }
	()
	{ after(grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionCalculPrimary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionCalculPrimary__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionCalculPrimary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldParserRuleCall_0_1()); }
	ruleNbField
	{ after(grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AggregatExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregatExpression__Group__0__Impl
	rule__AggregatExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregatExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregatExpressionAccess().getAggregatOpAssignment_0()); }
	(rule__AggregatExpression__AggregatOpAssignment_0)
	{ after(grammarAccess.getAggregatExpressionAccess().getAggregatOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregatExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AggregatExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregatExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAggregatExpressionAccess().getArgAssignment_1()); }
	(rule__AggregatExpression__ArgAssignment_1)
	{ after(grammarAccess.getAggregatExpressionAccess().getArgAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NestedExpressionCalcul__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExpressionCalcul__Group__0__Impl
	rule__NestedExpressionCalcul__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpressionCalculAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getNestedExpressionCalculAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExpressionCalcul__Group__1__Impl
	rule__NestedExpressionCalcul__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpressionCalculAccess().getExprAssignment_1()); }
	(rule__NestedExpressionCalcul__ExprAssignment_1)
	{ after(grammarAccess.getNestedExpressionCalculAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NestedExpressionCalcul__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNestedExpressionCalculAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getNestedExpressionCalculAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__StmtsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStmtsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStmtsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineIndexCond__CondAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineIndexCondAccess().getCondExpressionLogParserRuleCall_0()); }
		ruleExpressionLog
		{ after(grammarAccess.getLineIndexCondAccess().getCondExpressionLogParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LineIndexNum__LinesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineIndexNumAccess().getLinesINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getLineIndexNumAccess().getLinesINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldIndexName__FieldsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldIndexNameAccess().getFieldsFieldParserRuleCall_0()); }
		ruleField
		{ after(grammarAccess.getFieldIndexNameAccess().getFieldsFieldParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldIndexNum__ColumnsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldIndexNumAccess().getColumnsINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getFieldIndexNumAccess().getColumnsINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__LineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellIndexAccess().getLineINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getCellIndexAccess().getLineINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__ColnumAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellIndexAccess().getColnumINTTerminalRuleCall_3_0_0()); }
		RULE_INT
		{ after(grammarAccess.getCellIndexAccess().getColnumINTTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellIndex__ColnameAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellIndexAccess().getColnameFieldParserRuleCall_3_1_0()); }
		ruleField
		{ after(grammarAccess.getCellIndexAccess().getColnameFieldParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Values__ValuesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_2_1_0()); }
		ruleValue
		{ after(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getPathPathParserRuleCall_1_0()); }
		rulePath
		{ after(grammarAccess.getLoadAccess().getPathPathParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__SepDefinedAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getSepDefinedSepKeyword_2_0_0()); }
		(
			{ before(grammarAccess.getLoadAccess().getSepDefinedSepKeyword_2_0_0()); }
			'sep'
			{ after(grammarAccess.getLoadAccess().getSepDefinedSepKeyword_2_0_0()); }
		)
		{ after(grammarAccess.getLoadAccess().getSepDefinedSepKeyword_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__SepAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getSepSTRINGTerminalRuleCall_2_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getLoadAccess().getSepSTRINGTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Load__NoHeaderAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoadAccess().getNoHeaderNoheaderKeyword_3_0()); }
		(
			{ before(grammarAccess.getLoadAccess().getNoHeaderNoheaderKeyword_3_0()); }
			'noheader'
			{ after(grammarAccess.getLoadAccess().getNoHeaderNoheaderKeyword_3_0()); }
		)
		{ after(grammarAccess.getLoadAccess().getNoHeaderNoheaderKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getPathPathParserRuleCall_1_0()); }
		rulePath
		{ after(grammarAccess.getStoreAccess().getPathPathParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__SepDefinedAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getSepDefinedSepKeyword_2_0_0()); }
		(
			{ before(grammarAccess.getStoreAccess().getSepDefinedSepKeyword_2_0_0()); }
			'sep'
			{ after(grammarAccess.getStoreAccess().getSepDefinedSepKeyword_2_0_0()); }
		)
		{ after(grammarAccess.getStoreAccess().getSepDefinedSepKeyword_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Store__SepAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoreAccess().getSepSTRINGTerminalRuleCall_2_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getStoreAccess().getSepSTRINGTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportJson__PathAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExportJsonAccess().getPathPathParserRuleCall_1_0()); }
		rulePath
		{ after(grammarAccess.getExportJsonAccess().getPathPathParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Projection__FieldAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProjectionAccess().getFieldFieldIndexParserRuleCall_1_0()); }
		ruleFieldIndex
		{ after(grammarAccess.getProjectionAccess().getFieldFieldIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Select__LineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectAccess().getLineLineIndexParserRuleCall_1_0()); }
		ruleLineIndex
		{ after(grammarAccess.getSelectAccess().getLineLineIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteLine__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
		ruleLineIndex
		{ after(grammarAccess.getDeleteLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeleteField__FieldsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeleteFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
		ruleFieldIndex
		{ after(grammarAccess.getDeleteFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertLine__ValuesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertLineAccess().getValuesValuesParserRuleCall_1_0()); }
		ruleValues
		{ after(grammarAccess.getInsertLineAccess().getValuesValuesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__FieldnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertFieldAccess().getFieldnameFieldParserRuleCall_1_0()); }
		ruleField
		{ after(grammarAccess.getInsertFieldAccess().getFieldnameFieldParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InsertField__ValuesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInsertFieldAccess().getValuesValuesParserRuleCall_3_0()); }
		ruleValues
		{ after(grammarAccess.getInsertFieldAccess().getValuesValuesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
		ruleLineIndex
		{ after(grammarAccess.getModifyLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyLine__ValuesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyLineAccess().getValuesValuesParserRuleCall_3_0()); }
		ruleValues
		{ after(grammarAccess.getModifyLineAccess().getValuesValuesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__FieldsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
		ruleFieldIndex
		{ after(grammarAccess.getModifyFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyField__ValuesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyFieldAccess().getValuesValuesParserRuleCall_3_0()); }
		ruleValues
		{ after(grammarAccess.getModifyFieldAccess().getValuesValuesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__CellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyCellAccess().getCellCellIndexParserRuleCall_1_0()); }
		ruleCellIndex
		{ after(grammarAccess.getModifyCellAccess().getCellCellIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ModifyCell__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifyCellAccess().getValueValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getModifyCellAccess().getValueValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintLine__LinesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
		ruleLineIndex
		{ after(grammarAccess.getPrintLineAccess().getLinesLineIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintField__FieldsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
		ruleFieldIndex
		{ after(grammarAccess.getPrintFieldAccess().getFieldsFieldIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintCell__CellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintCellAccess().getCellCellIndexParserRuleCall_1_0()); }
		ruleCellIndex
		{ after(grammarAccess.getPrintCellAccess().getCellCellIndexParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintExpr__ExpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintExprAccess().getExpValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getPrintExprAccess().getExpValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionLog__ExprAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionLogAccess().getExprOrExpressionParserRuleCall_0()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionLogAccess().getExprOrExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getLhsAndExpressionParserRuleCall_0_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getLhsAndExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_1_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getLhsUnaryLogExpressionParserRuleCall_0_0()); }
		ruleUnaryLogExpression
		{ after(grammarAccess.getAndExpressionAccess().getLhsUnaryLogExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRhsUnaryLogExpressionParserRuleCall_1_1_0()); }
		ruleUnaryLogExpression
		{ after(grammarAccess.getAndExpressionAccess().getRhsUnaryLogExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogExpression__NotAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryLogExpressionAccess().getNotNotKeyword_0_0()); }
		(
			{ before(grammarAccess.getUnaryLogExpressionAccess().getNotNotKeyword_0_0()); }
			'not'
			{ after(grammarAccess.getUnaryLogExpressionAccess().getNotNotKeyword_0_0()); }
		)
		{ after(grammarAccess.getUnaryLogExpressionAccess().getNotNotKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryLogExpression__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryLogExpressionAccess().getExprExpressionLogPrimaryParserRuleCall_1_0()); }
		ruleExpressionLogPrimary
		{ after(grammarAccess.getUnaryLogExpressionAccess().getExprExpressionLogPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedLogExpression__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedLogExpressionAccess().getExprExpressionLogParserRuleCall_1_0()); }
		ruleExpressionLog
		{ after(grammarAccess.getNestedLogExpressionAccess().getExprExpressionLogParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__FieldAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionRelAccess().getFieldFieldParserRuleCall_0_0()); }
		ruleField
		{ after(grammarAccess.getExpressionRelAccess().getFieldFieldParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionRelAccess().getOpBinOpRelEnumRuleCall_1_0()); }
		ruleBinOpRel
		{ after(grammarAccess.getExpressionRelAccess().getOpBinOpRelEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionRel__ValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionRelAccess().getValValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getExpressionRelAccess().getValValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionCalcul__ExprAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionCalculAccess().getExprAdditiveExpressionParserRuleCall_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getExpressionCalculAccess().getExprAdditiveExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getLhsMultiplicativeExpressionParserRuleCall_0_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getLhsMultiplicativeExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getRhsAdditiveExpressionRhsParserRuleCall_1_0()); }
		ruleAdditiveExpressionRhs
		{ after(grammarAccess.getAdditiveExpressionAccess().getRhsAdditiveExpressionRhsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionRhs__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionRhsAccess().getOpBinOpAddEnumRuleCall_0_0()); }
		ruleBinOpAdd
		{ after(grammarAccess.getAdditiveExpressionRhsAccess().getOpBinOpAddEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpressionRhs__RhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionRhsAccess().getRhsMultiplicativeExpressionParserRuleCall_1_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionRhsAccess().getRhsMultiplicativeExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getLhsUnaryExpressionParserRuleCall_0_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getLhsUnaryExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsMultiplicativeExpressionRhsParserRuleCall_1_0()); }
		ruleMultiplicativeExpressionRhs
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsMultiplicativeExpressionRhsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionRhs__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpBinOpMultEnumRuleCall_0_0()); }
		ruleBinOpMult
		{ after(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpBinOpMultEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpressionRhs__RhsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsUnaryExpressionParserRuleCall_1_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsUnaryExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0()); }
			'-'
			{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getExprExpressionCalculPrimaryParserRuleCall_1_0()); }
		ruleExpressionCalculPrimary
		{ after(grammarAccess.getUnaryExpressionAccess().getExprExpressionCalculPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregatExpression__AggregatOpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregatExpressionAccess().getAggregatOpAggregatEnumRuleCall_0_0()); }
		ruleAggregat
		{ after(grammarAccess.getAggregatExpressionAccess().getAggregatOpAggregatEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AggregatExpression__ArgAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregatExpressionAccess().getArgFieldParserRuleCall_1_0()); }
		ruleField
		{ after(grammarAccess.getAggregatExpressionAccess().getArgFieldParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LitteralInt__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLitteralIntAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getLitteralIntAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LitteralFloat__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLitteralFloatAccess().getValFLOATParserRuleCall_0()); }
		ruleFLOAT
		{ after(grammarAccess.getLitteralFloatAccess().getValFLOATParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LitteralString__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLitteralStringAccess().getValSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getLitteralStringAccess().getValSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NestedExpressionCalcul__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNestedExpressionCalculAccess().getExprExpressionCalculParserRuleCall_1_0()); }
		ruleExpressionCalcul
		{ after(grammarAccess.getNestedExpressionCalculAccess().getExprExpressionCalculParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
