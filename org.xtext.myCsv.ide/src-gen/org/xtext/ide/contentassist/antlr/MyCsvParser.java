/*
 * generated by Xtext 2.23.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalMyCsvParser;
import org.xtext.services.MyCsvGrammarAccess;

public class MyCsvParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyCsvGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyCsvGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLineIndexAccess().getAlternatives(), "rule__LineIndex__Alternatives");
			builder.put(grammarAccess.getFieldIndexAccess().getAlternatives(), "rule__FieldIndex__Alternatives");
			builder.put(grammarAccess.getCellIndexAccess().getAlternatives_3(), "rule__CellIndex__Alternatives_3");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getDeleteAccess().getAlternatives_1(), "rule__Delete__Alternatives_1");
			builder.put(grammarAccess.getInsertAccess().getAlternatives_1(), "rule__Insert__Alternatives_1");
			builder.put(grammarAccess.getModifyAccess().getAlternatives_1(), "rule__Modify__Alternatives_1");
			builder.put(grammarAccess.getPrintAccess().getAlternatives_1(), "rule__Print__Alternatives_1");
			builder.put(grammarAccess.getExpressionLogPrimaryAccess().getAlternatives(), "rule__ExpressionLogPrimary__Alternatives");
			builder.put(grammarAccess.getExpressionCalculPrimaryAccess().getAlternatives(), "rule__ExpressionCalculPrimary__Alternatives");
			builder.put(grammarAccess.getBinOpRelAccess().getAlternatives(), "rule__BinOpRel__Alternatives");
			builder.put(grammarAccess.getAggregatAccess().getAlternatives(), "rule__Aggregat__Alternatives");
			builder.put(grammarAccess.getBinOpAddAccess().getAlternatives(), "rule__BinOpAdd__Alternatives");
			builder.put(grammarAccess.getBinOpMultAccess().getAlternatives(), "rule__BinOpMult__Alternatives");
			builder.put(grammarAccess.getCellIndexAccess().getGroup(), "rule__CellIndex__Group__0");
			builder.put(grammarAccess.getValuesAccess().getGroup(), "rule__Values__Group__0");
			builder.put(grammarAccess.getValuesAccess().getGroup_2(), "rule__Values__Group_2__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getLoadAccess().getGroup_2(), "rule__Load__Group_2__0");
			builder.put(grammarAccess.getStoreAccess().getGroup(), "rule__Store__Group__0");
			builder.put(grammarAccess.getStoreAccess().getGroup_2(), "rule__Store__Group_2__0");
			builder.put(grammarAccess.getExportJsonAccess().getGroup(), "rule__ExportJson__Group__0");
			builder.put(grammarAccess.getProjectionAccess().getGroup(), "rule__Projection__Group__0");
			builder.put(grammarAccess.getSelectAccess().getGroup(), "rule__Select__Group__0");
			builder.put(grammarAccess.getDeleteAccess().getGroup(), "rule__Delete__Group__0");
			builder.put(grammarAccess.getDeleteLineAccess().getGroup(), "rule__DeleteLine__Group__0");
			builder.put(grammarAccess.getDeleteFieldAccess().getGroup(), "rule__DeleteField__Group__0");
			builder.put(grammarAccess.getInsertAccess().getGroup(), "rule__Insert__Group__0");
			builder.put(grammarAccess.getInsertLineAccess().getGroup(), "rule__InsertLine__Group__0");
			builder.put(grammarAccess.getInsertFieldAccess().getGroup(), "rule__InsertField__Group__0");
			builder.put(grammarAccess.getModifyAccess().getGroup(), "rule__Modify__Group__0");
			builder.put(grammarAccess.getModifyLineAccess().getGroup(), "rule__ModifyLine__Group__0");
			builder.put(grammarAccess.getModifyFieldAccess().getGroup(), "rule__ModifyField__Group__0");
			builder.put(grammarAccess.getModifyCellAccess().getGroup(), "rule__ModifyCell__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup_1_3(), "rule__Print__Group_1_3__0");
			builder.put(grammarAccess.getPrintLineAccess().getGroup(), "rule__PrintLine__Group__0");
			builder.put(grammarAccess.getPrintFieldAccess().getGroup(), "rule__PrintField__Group__0");
			builder.put(grammarAccess.getPrintCellAccess().getGroup(), "rule__PrintCell__Group__0");
			builder.put(grammarAccess.getPrintExprAccess().getGroup(), "rule__PrintExpr__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getUnaryLogExpressionAccess().getGroup(), "rule__UnaryLogExpression__Group__0");
			builder.put(grammarAccess.getNestedLogExpressionAccess().getGroup(), "rule__NestedLogExpression__Group__0");
			builder.put(grammarAccess.getExpressionRelAccess().getGroup(), "rule__ExpressionRel__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionRhsAccess().getGroup(), "rule__AdditiveExpressionRhs__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionRhsAccess().getGroup(), "rule__MultiplicativeExpressionRhs__Group__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
			builder.put(grammarAccess.getExpressionCalculPrimaryAccess().getGroup_0(), "rule__ExpressionCalculPrimary__Group_0__0");
			builder.put(grammarAccess.getAggregatExpressionAccess().getGroup(), "rule__AggregatExpression__Group__0");
			builder.put(grammarAccess.getNestedExpressionCalculAccess().getGroup(), "rule__NestedExpressionCalcul__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getProgramAccess().getStmtsAssignment(), "rule__Program__StmtsAssignment");
			builder.put(grammarAccess.getLineIndexCondAccess().getCondAssignment(), "rule__LineIndexCond__CondAssignment");
			builder.put(grammarAccess.getLineIndexNumAccess().getLinesAssignment(), "rule__LineIndexNum__LinesAssignment");
			builder.put(grammarAccess.getFieldIndexNameAccess().getFieldsAssignment(), "rule__FieldIndexName__FieldsAssignment");
			builder.put(grammarAccess.getFieldIndexNumAccess().getColumnsAssignment(), "rule__FieldIndexNum__ColumnsAssignment");
			builder.put(grammarAccess.getCellIndexAccess().getLineAssignment_1(), "rule__CellIndex__LineAssignment_1");
			builder.put(grammarAccess.getCellIndexAccess().getColnumAssignment_3_0(), "rule__CellIndex__ColnumAssignment_3_0");
			builder.put(grammarAccess.getCellIndexAccess().getColnameAssignment_3_1(), "rule__CellIndex__ColnameAssignment_3_1");
			builder.put(grammarAccess.getValuesAccess().getValuesAssignment_1(), "rule__Values__ValuesAssignment_1");
			builder.put(grammarAccess.getValuesAccess().getValuesAssignment_2_1(), "rule__Values__ValuesAssignment_2_1");
			builder.put(grammarAccess.getPathAccess().getValueAssignment(), "rule__Path__ValueAssignment");
			builder.put(grammarAccess.getFieldAccess().getValueAssignment(), "rule__Field__ValueAssignment");
			builder.put(grammarAccess.getLoadAccess().getPathAssignment_1(), "rule__Load__PathAssignment_1");
			builder.put(grammarAccess.getLoadAccess().getSepDefinedAssignment_2_0(), "rule__Load__SepDefinedAssignment_2_0");
			builder.put(grammarAccess.getLoadAccess().getSepAssignment_2_2(), "rule__Load__SepAssignment_2_2");
			builder.put(grammarAccess.getLoadAccess().getNoHeaderAssignment_3(), "rule__Load__NoHeaderAssignment_3");
			builder.put(grammarAccess.getStoreAccess().getPathAssignment_1(), "rule__Store__PathAssignment_1");
			builder.put(grammarAccess.getStoreAccess().getSepDefinedAssignment_2_0(), "rule__Store__SepDefinedAssignment_2_0");
			builder.put(grammarAccess.getStoreAccess().getSepAssignment_2_2(), "rule__Store__SepAssignment_2_2");
			builder.put(grammarAccess.getExportJsonAccess().getPathAssignment_1(), "rule__ExportJson__PathAssignment_1");
			builder.put(grammarAccess.getProjectionAccess().getFieldAssignment_1(), "rule__Projection__FieldAssignment_1");
			builder.put(grammarAccess.getSelectAccess().getLineAssignment_1(), "rule__Select__LineAssignment_1");
			builder.put(grammarAccess.getDeleteLineAccess().getLinesAssignment_1(), "rule__DeleteLine__LinesAssignment_1");
			builder.put(grammarAccess.getDeleteFieldAccess().getFieldsAssignment_1(), "rule__DeleteField__FieldsAssignment_1");
			builder.put(grammarAccess.getInsertLineAccess().getValuesAssignment_1(), "rule__InsertLine__ValuesAssignment_1");
			builder.put(grammarAccess.getInsertFieldAccess().getFieldnameAssignment_1(), "rule__InsertField__FieldnameAssignment_1");
			builder.put(grammarAccess.getInsertFieldAccess().getValuesAssignment_3(), "rule__InsertField__ValuesAssignment_3");
			builder.put(grammarAccess.getModifyLineAccess().getLinesAssignment_1(), "rule__ModifyLine__LinesAssignment_1");
			builder.put(grammarAccess.getModifyLineAccess().getValuesAssignment_3(), "rule__ModifyLine__ValuesAssignment_3");
			builder.put(grammarAccess.getModifyFieldAccess().getFieldsAssignment_1(), "rule__ModifyField__FieldsAssignment_1");
			builder.put(grammarAccess.getModifyFieldAccess().getValuesAssignment_3(), "rule__ModifyField__ValuesAssignment_3");
			builder.put(grammarAccess.getModifyCellAccess().getCellAssignment_1(), "rule__ModifyCell__CellAssignment_1");
			builder.put(grammarAccess.getModifyCellAccess().getValueAssignment_3(), "rule__ModifyCell__ValueAssignment_3");
			builder.put(grammarAccess.getPrintLineAccess().getLinesAssignment_1(), "rule__PrintLine__LinesAssignment_1");
			builder.put(grammarAccess.getPrintFieldAccess().getFieldsAssignment_1(), "rule__PrintField__FieldsAssignment_1");
			builder.put(grammarAccess.getPrintCellAccess().getCellAssignment_1(), "rule__PrintCell__CellAssignment_1");
			builder.put(grammarAccess.getPrintExprAccess().getExpAssignment_1(), "rule__PrintExpr__ExpAssignment_1");
			builder.put(grammarAccess.getExpressionLogAccess().getExprAssignment(), "rule__ExpressionLog__ExprAssignment");
			builder.put(grammarAccess.getOrExpressionAccess().getLhsAssignment_0(), "rule__OrExpression__LhsAssignment_0");
			builder.put(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_1(), "rule__OrExpression__RhsAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getLhsAssignment_0(), "rule__AndExpression__LhsAssignment_0");
			builder.put(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_1(), "rule__AndExpression__RhsAssignment_1_1");
			builder.put(grammarAccess.getUnaryLogExpressionAccess().getNotAssignment_0(), "rule__UnaryLogExpression__NotAssignment_0");
			builder.put(grammarAccess.getUnaryLogExpressionAccess().getExprAssignment_1(), "rule__UnaryLogExpression__ExprAssignment_1");
			builder.put(grammarAccess.getNestedLogExpressionAccess().getExprAssignment_1(), "rule__NestedLogExpression__ExprAssignment_1");
			builder.put(grammarAccess.getExpressionRelAccess().getFieldAssignment_0(), "rule__ExpressionRel__FieldAssignment_0");
			builder.put(grammarAccess.getExpressionRelAccess().getOpAssignment_1(), "rule__ExpressionRel__OpAssignment_1");
			builder.put(grammarAccess.getExpressionRelAccess().getValAssignment_2(), "rule__ExpressionRel__ValAssignment_2");
			builder.put(grammarAccess.getExpressionCalculAccess().getExprAssignment(), "rule__ExpressionCalcul__ExprAssignment");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getLhsAssignment_0(), "rule__AdditiveExpression__LhsAssignment_0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1(), "rule__AdditiveExpression__RhsAssignment_1");
			builder.put(grammarAccess.getAdditiveExpressionRhsAccess().getOpAssignment_0(), "rule__AdditiveExpressionRhs__OpAssignment_0");
			builder.put(grammarAccess.getAdditiveExpressionRhsAccess().getRhsAssignment_1(), "rule__AdditiveExpressionRhs__RhsAssignment_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getLhsAssignment_0(), "rule__MultiplicativeExpression__LhsAssignment_0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1(), "rule__MultiplicativeExpression__RhsAssignment_1");
			builder.put(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpAssignment_0(), "rule__MultiplicativeExpressionRhs__OpAssignment_0");
			builder.put(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsAssignment_1(), "rule__MultiplicativeExpressionRhs__RhsAssignment_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0(), "rule__UnaryExpression__OpAssignment_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getExprAssignment_1(), "rule__UnaryExpression__ExprAssignment_1");
			builder.put(grammarAccess.getAggregatExpressionAccess().getAggregatOpAssignment_0(), "rule__AggregatExpression__AggregatOpAssignment_0");
			builder.put(grammarAccess.getAggregatExpressionAccess().getArgAssignment_1(), "rule__AggregatExpression__ArgAssignment_1");
			builder.put(grammarAccess.getLitteralIntAccess().getValAssignment(), "rule__LitteralInt__ValAssignment");
			builder.put(grammarAccess.getLitteralFloatAccess().getValAssignment(), "rule__LitteralFloat__ValAssignment");
			builder.put(grammarAccess.getLitteralStringAccess().getValAssignment(), "rule__LitteralString__ValAssignment");
			builder.put(grammarAccess.getNestedExpressionCalculAccess().getExprAssignment_1(), "rule__NestedExpressionCalcul__ExprAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyCsvGrammarAccess grammarAccess;

	@Override
	protected InternalMyCsvParser createParser() {
		InternalMyCsvParser result = new InternalMyCsvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyCsvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyCsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
