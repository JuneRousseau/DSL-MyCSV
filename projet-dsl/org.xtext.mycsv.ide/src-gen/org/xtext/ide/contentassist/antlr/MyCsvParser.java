/*
 * generated by Xtext 2.18.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalMyCsvParser;
import org.xtext.services.MyCsvGrammarAccess;

public class MyCsvParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyCsvGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyCsvGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getBinOpAccess().getAlternatives(), "rule__BinOp__Alternatives");
			builder.put(grammarAccess.getAggregatAccess().getAlternatives(), "rule__Aggregat__Alternatives");
			builder.put(grammarAccess.getUnaryOpAccess().getAlternatives(), "rule__UnaryOp__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_7(), "rule__Expression__Group_7__0");
			builder.put(grammarAccess.getProgrammAccess().getStmtsAssignment(), "rule__Programm__StmtsAssignment");
			builder.put(grammarAccess.getStatementAccess().getPrimAssignment_0(), "rule__Statement__PrimAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getArgsAssignment_1(), "rule__Statement__ArgsAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getArgAssignment_0_1(), "rule__Expression__ArgAssignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getLhsAssignment_1_1(), "rule__Expression__LhsAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRhsAssignment_1_3(), "rule__Expression__RhsAssignment_1_3");
			builder.put(grammarAccess.getExpressionAccess().getArgAssignment_2_1(), "rule__Expression__ArgAssignment_2_1");
			builder.put(grammarAccess.getExpressionAccess().getExpAssignment_7_1(), "rule__Expression__ExpAssignment_7_1");
			builder.put(grammarAccess.getPathAccess().getValueAssignment(), "rule__Path__ValueAssignment");
			builder.put(grammarAccess.getConstAccess().getValueAssignment(), "rule__Const__ValueAssignment");
			builder.put(grammarAccess.getFieldAccess().getValueAssignment(), "rule__Field__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyCsvGrammarAccess grammarAccess;

	@Override
	protected InternalMyCsvParser createParser() {
		InternalMyCsvParser result = new InternalMyCsvParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyCsvGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyCsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
