/*
 * generated by Xtext 2.18.0
 */
grammar InternalMyCsv;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.MyCsvGrammarAccess;

}
@parser::members {
	private MyCsvGrammarAccess grammarAccess;

	public void setGrammarAccess(MyCsvGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgramm
entryRuleProgramm
:
{ before(grammarAccess.getProgrammRule()); }
	 ruleProgramm
{ after(grammarAccess.getProgrammRule()); } 
	 EOF 
;

// Rule Programm
ruleProgramm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgrammAccess().getStmtsAssignment()); }
		(rule__Programm__StmtsAssignment)*
		{ after(grammarAccess.getProgrammAccess().getStmtsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitive
entryRulePrimitive
:
{ before(grammarAccess.getPrimitiveRule()); }
	 rulePrimitive
{ after(grammarAccess.getPrimitiveRule()); } 
	 EOF 
;

// Rule Primitive
rulePrimitive 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveAccess().getAlternatives()); }
		(rule__Primitive__Alternatives)
		{ after(grammarAccess.getPrimitiveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getPrintKeyword()); }
		'Print'
		{ after(grammarAccess.getPrintAccess().getPrintKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProject
entryRuleProject
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProjectAccess().getProjectionKeyword()); }
		'Projection'
		{ after(grammarAccess.getProjectAccess().getProjectionKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelect
entryRuleSelect
:
{ before(grammarAccess.getSelectRule()); }
	 ruleSelect
{ after(grammarAccess.getSelectRule()); } 
	 EOF 
;

// Rule Select
ruleSelect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectAccess().getSelectKeyword()); }
		'Select'
		{ after(grammarAccess.getSelectAccess().getSelectKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModify
entryRuleModify
:
{ before(grammarAccess.getModifyRule()); }
	 ruleModify
{ after(grammarAccess.getModifyRule()); } 
	 EOF 
;

// Rule Modify
ruleModify 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifyAccess().getModifyKeyword()); }
		'Modify'
		{ after(grammarAccess.getModifyAccess().getModifyKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInsert
entryRuleInsert
:
{ before(grammarAccess.getInsertRule()); }
	 ruleInsert
{ after(grammarAccess.getInsertRule()); } 
	 EOF 
;

// Rule Insert
ruleInsert 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInsertAccess().getInsertKeyword()); }
		'Insert'
		{ after(grammarAccess.getInsertAccess().getInsertKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelete
entryRuleDelete
:
{ before(grammarAccess.getDeleteRule()); }
	 ruleDelete
{ after(grammarAccess.getDeleteRule()); } 
	 EOF 
;

// Rule Delete
ruleDelete 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeleteAccess().getDeleteKeyword()); }
		'Delete'
		{ after(grammarAccess.getDeleteAccess().getDeleteKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExportJson
entryRuleExportJson
:
{ before(grammarAccess.getExportJsonRule()); }
	 ruleExportJson
{ after(grammarAccess.getExportJsonRule()); } 
	 EOF 
;

// Rule ExportJson
ruleExportJson 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExportJsonAccess().getExportJsonKeyword()); }
		'ExportJson'
		{ after(grammarAccess.getExportJsonAccess().getExportJsonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStore
entryRuleStore
:
{ before(grammarAccess.getStoreRule()); }
	 ruleStore
{ after(grammarAccess.getStoreRule()); } 
	 EOF 
;

// Rule Store
ruleStore 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoreAccess().getStoreKeyword()); }
		'Store'
		{ after(grammarAccess.getStoreAccess().getStoreKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoad
entryRuleLoad
:
{ before(grammarAccess.getLoadRule()); }
	 ruleLoad
{ after(grammarAccess.getLoadRule()); } 
	 EOF 
;

// Rule Load
ruleLoad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoadAccess().getLoadKeyword()); }
		'Load'
		{ after(grammarAccess.getLoadAccess().getLoadKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNbField
entryRuleNbField
:
{ before(grammarAccess.getNbFieldRule()); }
	 ruleNbField
{ after(grammarAccess.getNbFieldRule()); } 
	 EOF 
;

// Rule NbField
ruleNbField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNbFieldAccess().getNbFieldKeyword()); }
		'NbField'
		{ after(grammarAccess.getNbFieldAccess().getNbFieldKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePath
entryRulePath
:
{ before(grammarAccess.getPathRule()); }
	 rulePath
{ after(grammarAccess.getPathRule()); } 
	 EOF 
;

// Rule Path
rulePath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPathAccess().getValueAssignment()); }
		(rule__Path__ValueAssignment)
		{ after(grammarAccess.getPathAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getValueAssignment()); }
		(rule__Const__ValueAssignment)
		{ after(grammarAccess.getConstAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getValueAssignment()); }
		(rule__Field__ValueAssignment)
		{ after(grammarAccess.getFieldAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinOp
entryRuleBinOp
:
{ before(grammarAccess.getBinOpRule()); }
	 ruleBinOp
{ after(grammarAccess.getBinOpRule()); } 
	 EOF 
;

// Rule BinOp
ruleBinOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinOpAccess().getAlternatives()); }
		(rule__BinOp__Alternatives)
		{ after(grammarAccess.getBinOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAggregat
entryRuleAggregat
:
{ before(grammarAccess.getAggregatRule()); }
	 ruleAggregat
{ after(grammarAccess.getAggregatRule()); } 
	 EOF 
;

// Rule Aggregat
ruleAggregat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAggregatAccess().getAlternatives()); }
		(rule__Aggregat__Alternatives)
		{ after(grammarAccess.getAggregatAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOp
entryRuleUnaryOp
:
{ before(grammarAccess.getUnaryOpRule()); }
	 ruleUnaryOp
{ after(grammarAccess.getUnaryOpRule()); } 
	 EOF 
;

// Rule UnaryOp
ruleUnaryOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOpAccess().getAlternatives()); }
		(rule__UnaryOp__Alternatives)
		{ after(grammarAccess.getUnaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveAccess().getLoadParserRuleCall_0()); }
		ruleLoad
		{ after(grammarAccess.getPrimitiveAccess().getLoadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getStoreParserRuleCall_1()); }
		ruleStore
		{ after(grammarAccess.getPrimitiveAccess().getStoreParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getExportJsonParserRuleCall_2()); }
		ruleExportJson
		{ after(grammarAccess.getPrimitiveAccess().getExportJsonParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getDeleteParserRuleCall_3()); }
		ruleDelete
		{ after(grammarAccess.getPrimitiveAccess().getDeleteParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getInsertParserRuleCall_4()); }
		ruleInsert
		{ after(grammarAccess.getPrimitiveAccess().getInsertParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getModifyParserRuleCall_5()); }
		ruleModify
		{ after(grammarAccess.getPrimitiveAccess().getModifyParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getSelectParserRuleCall_6()); }
		ruleSelect
		{ after(grammarAccess.getPrimitiveAccess().getSelectParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getProjectParserRuleCall_7()); }
		ruleProject
		{ after(grammarAccess.getPrimitiveAccess().getProjectParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveAccess().getPrintParserRuleCall_8()); }
		rulePrint
		{ after(grammarAccess.getPrimitiveAccess().getPrintParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_0()); }
		(rule__Expression__Group_0__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
		(rule__Expression__Group_1__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
		(rule__Expression__Group_2__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getConstParserRuleCall_3()); }
		ruleConst
		{ after(grammarAccess.getExpressionAccess().getConstParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getFieldParserRuleCall_4()); }
		ruleField
		{ after(grammarAccess.getExpressionAccess().getFieldParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPathParserRuleCall_5()); }
		rulePath
		{ after(grammarAccess.getExpressionAccess().getPathParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNbFieldParserRuleCall_6()); }
		ruleNbField
		{ after(grammarAccess.getExpressionAccess().getNbFieldParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_7()); }
		(rule__Expression__Group_7__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinOpAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getBinOpAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getBinOpAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getEqualsSignKeyword_2()); }
		'='
		{ after(grammarAccess.getBinOpAccess().getEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getLessThanSignKeyword_3()); }
		'<'
		{ after(grammarAccess.getBinOpAccess().getLessThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinOpAccess().getLessThanSignEqualsSignKeyword_4()); }
		'<='
		{ after(grammarAccess.getBinOpAccess().getLessThanSignEqualsSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregat__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAggregatAccess().getCountKeyword_0()); }
		'Count'
		{ after(grammarAccess.getAggregatAccess().getCountKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAggregatAccess().getSumKeyword_1()); }
		'Sum'
		{ after(grammarAccess.getAggregatAccess().getSumKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getHyphenMinusKeyword_0()); }
		'-'
		{ after(grammarAccess.getUnaryOpAccess().getHyphenMinusKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getNotKeyword_1()); }
		'Not'
		{ after(grammarAccess.getUnaryOpAccess().getNotKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getPrimAssignment_0()); }
	(rule__Statement__PrimAssignment_0)
	{ after(grammarAccess.getStatementAccess().getPrimAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getArgsAssignment_1()); }
	(rule__Statement__ArgsAssignment_1)*
	{ after(grammarAccess.getStatementAccess().getArgsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__0__Impl
	rule__Expression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getUnaryOpParserRuleCall_0_0()); }
	ruleUnaryOp
	{ after(grammarAccess.getExpressionAccess().getUnaryOpParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getArgAssignment_0_1()); }
	(rule__Expression__ArgAssignment_0_1)
	{ after(grammarAccess.getExpressionAccess().getArgAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLhsAssignment_1_1()); }
	(rule__Expression__LhsAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getLhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
	rule__Expression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getBinOpParserRuleCall_1_2()); }
	ruleBinOp
	{ after(grammarAccess.getExpressionAccess().getBinOpParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__3__Impl
	rule__Expression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRhsAssignment_1_3()); }
	(rule__Expression__RhsAssignment_1_3)
	{ after(grammarAccess.getExpressionAccess().getRhsAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_4()); }
	')'
	{ after(grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getAggregatParserRuleCall_2_0()); }
	ruleAggregat
	{ after(grammarAccess.getExpressionAccess().getAggregatParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getArgAssignment_2_1()); }
	(rule__Expression__ArgAssignment_2_1)
	{ after(grammarAccess.getExpressionAccess().getArgAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_7__0__Impl
	rule__Expression__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_7_0()); }
	'['
	{ after(grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_7__1__Impl
	rule__Expression__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpAssignment_7_1()); }
	(rule__Expression__ExpAssignment_7_1)
	{ after(grammarAccess.getExpressionAccess().getExpAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_7__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_7__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_7_2()); }
	']'
	{ after(grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_7_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Programm__StmtsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgrammAccess().getStmtsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getProgrammAccess().getStmtsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__PrimAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrimPrimitiveParserRuleCall_0_0()); }
		rulePrimitive
		{ after(grammarAccess.getStatementAccess().getPrimPrimitiveParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ArgsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getArgsExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getStatementAccess().getArgsExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ArgAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getArgExpressionParserRuleCall_0_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getArgExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getLhsExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getLhsExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RhsAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_3_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ArgAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getArgFieldParserRuleCall_2_1_0()); }
		ruleField
		{ after(grammarAccess.getExpressionAccess().getArgFieldParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ExpAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getExpExpressionParserRuleCall_7_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExpressionAccess().getExpExpressionParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Path__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getConstAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
