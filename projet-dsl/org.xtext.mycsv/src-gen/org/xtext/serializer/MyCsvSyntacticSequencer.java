/*
 * generated by Xtext 2.18.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.MyCsvGrammarAccess;

@SuppressWarnings("all")
public class MyCsvSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyCsvGrammarAccess grammarAccess;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyCsvGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAggregatRule())
			return getAggregatToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBinOpRule())
			return getBinOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNbFieldRule())
			return getNbFieldToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUnaryOpRule())
			return getUnaryOpToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Aggregat:
	 * 	('Count' | 'Sum')
	 * ;
	 */
	protected String getAggregatToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Count";
	}
	
	/**
	 * BinOp:
	 * 	'+' | '-' | '=' | '<' | '<='
	 * ;
	 */
	protected String getBinOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * NbField:
	 * 	'NbField'
	 * ;
	 */
	protected String getNbFieldToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NbField";
	}
	
	/**
	 * UnaryOp:
	 * 	'-' | 'Not'
	 * ;
	 */
	protected String getUnaryOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}
