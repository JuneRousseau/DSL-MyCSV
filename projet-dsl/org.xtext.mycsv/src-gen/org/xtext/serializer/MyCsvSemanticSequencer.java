/*
 * generated by Xtext 2.18.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.myCsv.Const;
import org.xtext.myCsv.Expression;
import org.xtext.myCsv.Field;
import org.xtext.myCsv.MyCsvPackage;
import org.xtext.myCsv.Path;
import org.xtext.myCsv.Programm;
import org.xtext.myCsv.Statement;
import org.xtext.services.MyCsvGrammarAccess;

@SuppressWarnings("all")
public class MyCsvSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyCsvGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyCsvPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyCsvPackage.CONST:
				sequence_Const(context, (Const) semanticObject); 
				return; 
			case MyCsvPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MyCsvPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case MyCsvPackage.PATH:
				sequence_Path(context, (Path) semanticObject); 
				return; 
			case MyCsvPackage.PROGRAMM:
				sequence_Programm(context, (Programm) semanticObject); 
				return; 
			case MyCsvPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns Const
	 *     Const returns Const
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Const(ISerializationContext context, Const semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyCsvPackage.Literals.CONST__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyCsvPackage.Literals.CONST__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (arg=Expression | (lhs=Expression rhs=Expression) | arg=Field | exp=Expression)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Field
	 *     Field returns Field
	 *
	 * Constraint:
	 *     value=ID
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyCsvPackage.Literals.FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyCsvPackage.Literals.FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Path
	 *     Path returns Path
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyCsvPackage.Literals.PATH__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyCsvPackage.Literals.PATH__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Programm returns Programm
	 *
	 * Constraint:
	 *     stmts+=Statement+
	 */
	protected void sequence_Programm(ISerializationContext context, Programm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (prim+=Primitive args+=Expression*)
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
