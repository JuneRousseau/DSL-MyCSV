/*
 * generated by Xtext 2.18.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyCsvGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgrammElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Programm");
		private final Assignment cStmtsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_0 = (RuleCall)cStmtsAssignment.eContents().get(0);
		
		//Programm:
		//	stmts+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//stmts+=Statement*
		public Assignment getStmtsAssignment() { return cStmtsAssignment; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_0() { return cStmtsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrimAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrimPrimitiveParserRuleCall_0_0 = (RuleCall)cPrimAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//Statement:
		//	prim+=Primitive args+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//prim+=Primitive args+=Expression*
		public Group getGroup() { return cGroup; }
		
		//prim+=Primitive
		public Assignment getPrimAssignment_0() { return cPrimAssignment_0; }
		
		//Primitive
		public RuleCall getPrimPrimitiveParserRuleCall_0_0() { return cPrimPrimitiveParserRuleCall_0_0; }
		
		//args+=Expression*
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_0() { return cArgsExpressionParserRuleCall_1_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoadParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExportJsonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInsertParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cModifyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProjectParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPrintParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Primitive:
		//	Load
		//	| Store
		//	| ExportJson
		//	| Delete
		//	| Insert
		//	| Modify
		//	| Select
		//	| Project
		//	| Print;
		@Override public ParserRule getRule() { return rule; }
		
		//Load | Store | ExportJson | Delete | Insert | Modify | Select | Project | Print
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Load
		public RuleCall getLoadParserRuleCall_0() { return cLoadParserRuleCall_0; }
		
		//Store
		public RuleCall getStoreParserRuleCall_1() { return cStoreParserRuleCall_1; }
		
		//ExportJson
		public RuleCall getExportJsonParserRuleCall_2() { return cExportJsonParserRuleCall_2; }
		
		//Delete
		public RuleCall getDeleteParserRuleCall_3() { return cDeleteParserRuleCall_3; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_4() { return cInsertParserRuleCall_4; }
		
		//Modify
		public RuleCall getModifyParserRuleCall_5() { return cModifyParserRuleCall_5; }
		
		//Select
		public RuleCall getSelectParserRuleCall_6() { return cSelectParserRuleCall_6; }
		
		//Project
		public RuleCall getProjectParserRuleCall_7() { return cProjectParserRuleCall_7; }
		
		//Print
		public RuleCall getPrintParserRuleCall_8() { return cPrintParserRuleCall_8; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Print");
		private final Keyword cPrintKeyword = (Keyword)rule.eContents().get(1);
		
		//Print:
		//	'Print';
		@Override public ParserRule getRule() { return rule; }
		
		//'Print'
		public Keyword getPrintKeyword() { return cPrintKeyword; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Project");
		private final Keyword cProjectionKeyword = (Keyword)rule.eContents().get(1);
		
		//Project:
		//	'Projection';
		@Override public ParserRule getRule() { return rule; }
		
		//'Projection'
		public Keyword getProjectionKeyword() { return cProjectionKeyword; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Select");
		private final Keyword cSelectKeyword = (Keyword)rule.eContents().get(1);
		
		//Select:
		//	'Select';
		@Override public ParserRule getRule() { return rule; }
		
		//'Select'
		public Keyword getSelectKeyword() { return cSelectKeyword; }
	}
	public class ModifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Modify");
		private final Keyword cModifyKeyword = (Keyword)rule.eContents().get(1);
		
		//Modify:
		//	'Modify';
		@Override public ParserRule getRule() { return rule; }
		
		//'Modify'
		public Keyword getModifyKeyword() { return cModifyKeyword; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Insert");
		private final Keyword cInsertKeyword = (Keyword)rule.eContents().get(1);
		
		//Insert:
		//	'Insert';
		@Override public ParserRule getRule() { return rule; }
		
		//'Insert'
		public Keyword getInsertKeyword() { return cInsertKeyword; }
	}
	public class DeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Delete");
		private final Keyword cDeleteKeyword = (Keyword)rule.eContents().get(1);
		
		//Delete:
		//	'Delete';
		@Override public ParserRule getRule() { return rule; }
		
		//'Delete'
		public Keyword getDeleteKeyword() { return cDeleteKeyword; }
	}
	public class ExportJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.ExportJson");
		private final Keyword cExportJsonKeyword = (Keyword)rule.eContents().get(1);
		
		//ExportJson:
		//	'ExportJson';
		@Override public ParserRule getRule() { return rule; }
		
		//'ExportJson'
		public Keyword getExportJsonKeyword() { return cExportJsonKeyword; }
	}
	public class StoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Store");
		private final Keyword cStoreKeyword = (Keyword)rule.eContents().get(1);
		
		//Store:
		//	'Store';
		@Override public ParserRule getRule() { return rule; }
		
		//'Store'
		public Keyword getStoreKeyword() { return cStoreKeyword; }
	}
	public class LoadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Load");
		private final Keyword cLoadKeyword = (Keyword)rule.eContents().get(1);
		
		//Load:
		//	'Load';
		@Override public ParserRule getRule() { return rule; }
		
		//'Load'
		public Keyword getLoadKeyword() { return cLoadKeyword; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryOpParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cArgAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArgExpressionParserRuleCall_0_1_0 = (RuleCall)cArgAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLhsExpressionParserRuleCall_1_1_0 = (RuleCall)cLhsAssignment_1_1.eContents().get(0);
		private final RuleCall cBinOpParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRhsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRhsExpressionParserRuleCall_1_3_0 = (RuleCall)cRhsAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAggregatParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cArgAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgFieldParserRuleCall_2_1_0 = (RuleCall)cArgAssignment_2_1.eContents().get(0);
		private final RuleCall cConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFieldParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPathParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNbFieldParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cExpAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_7_1_0 = (RuleCall)cExpAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Expression:
		//	UnaryOp arg=Expression
		//	| '(' lhs=Expression BinOp rhs=Expression ')'
		//	| Aggregat arg=Field
		//	| Const
		//	| Field
		//	| Path
		//	| NbField
		//	| '[' exp=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOp arg=Expression | '(' lhs=Expression BinOp rhs=Expression ')' | Aggregat arg=Field | Const | Field | Path |
		//NbField | '[' exp=Expression ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryOp arg=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//UnaryOp
		public RuleCall getUnaryOpParserRuleCall_0_0() { return cUnaryOpParserRuleCall_0_0; }
		
		//arg=Expression
		public Assignment getArgAssignment_0_1() { return cArgAssignment_0_1; }
		
		//Expression
		public RuleCall getArgExpressionParserRuleCall_0_1_0() { return cArgExpressionParserRuleCall_0_1_0; }
		
		//'(' lhs=Expression BinOp rhs=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//lhs=Expression
		public Assignment getLhsAssignment_1_1() { return cLhsAssignment_1_1; }
		
		//Expression
		public RuleCall getLhsExpressionParserRuleCall_1_1_0() { return cLhsExpressionParserRuleCall_1_1_0; }
		
		//BinOp
		public RuleCall getBinOpParserRuleCall_1_2() { return cBinOpParserRuleCall_1_2; }
		
		//rhs=Expression
		public Assignment getRhsAssignment_1_3() { return cRhsAssignment_1_3; }
		
		//Expression
		public RuleCall getRhsExpressionParserRuleCall_1_3_0() { return cRhsExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//Aggregat arg=Field
		public Group getGroup_2() { return cGroup_2; }
		
		//Aggregat
		public RuleCall getAggregatParserRuleCall_2_0() { return cAggregatParserRuleCall_2_0; }
		
		//arg=Field
		public Assignment getArgAssignment_2_1() { return cArgAssignment_2_1; }
		
		//Field
		public RuleCall getArgFieldParserRuleCall_2_1_0() { return cArgFieldParserRuleCall_2_1_0; }
		
		//Const
		public RuleCall getConstParserRuleCall_3() { return cConstParserRuleCall_3; }
		
		//Field
		public RuleCall getFieldParserRuleCall_4() { return cFieldParserRuleCall_4; }
		
		//Path
		public RuleCall getPathParserRuleCall_5() { return cPathParserRuleCall_5; }
		
		//NbField
		public RuleCall getNbFieldParserRuleCall_6() { return cNbFieldParserRuleCall_6; }
		
		//'[' exp=Expression ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_7_1() { return cExpAssignment_7_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_7_1_0() { return cExpExpressionParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
	}
	public class NbFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.NbField");
		private final Keyword cNbFieldKeyword = (Keyword)rule.eContents().get(1);
		
		//NbField:
		//	'NbField';
		@Override public ParserRule getRule() { return rule; }
		
		//'NbField'
		public Keyword getNbFieldKeyword() { return cNbFieldKeyword; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Path");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Path:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Const");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Const:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Field");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Field:
		//	value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class BinOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.BinOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//BinOp:
		//	'+' | '-' | '=' | '<' | '<=';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '=' | '<' | '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
	}
	public class AggregatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.Aggregat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Aggregat:
		//	'Count' | 'Sum';
		@Override public ParserRule getRule() { return rule; }
		
		//'Count' | 'Sum'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//'Sum'
		public Keyword getSumKeyword_1() { return cSumKeyword_1; }
	}
	public class UnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.MyCsv.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOp:
		//	'-' | 'Not';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | 'Not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'Not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}
	
	
	private final ProgrammElements pProgramm;
	private final StatementElements pStatement;
	private final PrimitiveElements pPrimitive;
	private final PrintElements pPrint;
	private final ProjectElements pProject;
	private final SelectElements pSelect;
	private final ModifyElements pModify;
	private final InsertElements pInsert;
	private final DeleteElements pDelete;
	private final ExportJsonElements pExportJson;
	private final StoreElements pStore;
	private final LoadElements pLoad;
	private final ExpressionElements pExpression;
	private final NbFieldElements pNbField;
	private final PathElements pPath;
	private final ConstElements pConst;
	private final FieldElements pField;
	private final BinOpElements pBinOp;
	private final AggregatElements pAggregat;
	private final UnaryOpElements pUnaryOp;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyCsvGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgramm = new ProgrammElements();
		this.pStatement = new StatementElements();
		this.pPrimitive = new PrimitiveElements();
		this.pPrint = new PrintElements();
		this.pProject = new ProjectElements();
		this.pSelect = new SelectElements();
		this.pModify = new ModifyElements();
		this.pInsert = new InsertElements();
		this.pDelete = new DeleteElements();
		this.pExportJson = new ExportJsonElements();
		this.pStore = new StoreElements();
		this.pLoad = new LoadElements();
		this.pExpression = new ExpressionElements();
		this.pNbField = new NbFieldElements();
		this.pPath = new PathElements();
		this.pConst = new ConstElements();
		this.pField = new FieldElements();
		this.pBinOp = new BinOpElements();
		this.pAggregat = new AggregatElements();
		this.pUnaryOp = new UnaryOpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.MyCsv".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programm:
	//	stmts+=Statement*;
	public ProgrammElements getProgrammAccess() {
		return pProgramm;
	}
	
	public ParserRule getProgrammRule() {
		return getProgrammAccess().getRule();
	}
	
	//Statement:
	//	prim+=Primitive args+=Expression*;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Primitive:
	//	Load
	//	| Store
	//	| ExportJson
	//	| Delete
	//	| Insert
	//	| Modify
	//	| Select
	//	| Project
	//	| Print;
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Print:
	//	'Print';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Project:
	//	'Projection';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Select:
	//	'Select';
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//Modify:
	//	'Modify';
	public ModifyElements getModifyAccess() {
		return pModify;
	}
	
	public ParserRule getModifyRule() {
		return getModifyAccess().getRule();
	}
	
	//Insert:
	//	'Insert';
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Delete:
	//	'Delete';
	public DeleteElements getDeleteAccess() {
		return pDelete;
	}
	
	public ParserRule getDeleteRule() {
		return getDeleteAccess().getRule();
	}
	
	//ExportJson:
	//	'ExportJson';
	public ExportJsonElements getExportJsonAccess() {
		return pExportJson;
	}
	
	public ParserRule getExportJsonRule() {
		return getExportJsonAccess().getRule();
	}
	
	//Store:
	//	'Store';
	public StoreElements getStoreAccess() {
		return pStore;
	}
	
	public ParserRule getStoreRule() {
		return getStoreAccess().getRule();
	}
	
	//Load:
	//	'Load';
	public LoadElements getLoadAccess() {
		return pLoad;
	}
	
	public ParserRule getLoadRule() {
		return getLoadAccess().getRule();
	}
	
	//Expression:
	//	UnaryOp arg=Expression
	//	| '(' lhs=Expression BinOp rhs=Expression ')'
	//	| Aggregat arg=Field
	//	| Const
	//	| Field
	//	| Path
	//	| NbField
	//	| '[' exp=Expression ']';
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//NbField:
	//	'NbField';
	public NbFieldElements getNbFieldAccess() {
		return pNbField;
	}
	
	public ParserRule getNbFieldRule() {
		return getNbFieldAccess().getRule();
	}
	
	//Path:
	//	value=STRING;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//Const:
	//	value=INT;
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Field:
	//	value=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//BinOp:
	//	'+' | '-' | '=' | '<' | '<=';
	public BinOpElements getBinOpAccess() {
		return pBinOp;
	}
	
	public ParserRule getBinOpRule() {
		return getBinOpAccess().getRule();
	}
	
	//Aggregat:
	//	'Count' | 'Sum';
	public AggregatElements getAggregatAccess() {
		return pAggregat;
	}
	
	public ParserRule getAggregatRule() {
		return getAggregatAccess().getRule();
	}
	
	//UnaryOp:
	//	'-' | 'Not';
	public UnaryOpElements getUnaryOpAccess() {
		return pUnaryOp;
	}
	
	public ParserRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
