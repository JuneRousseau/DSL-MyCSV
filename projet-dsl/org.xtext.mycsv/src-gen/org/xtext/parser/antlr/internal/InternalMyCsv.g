/*
 * generated by Xtext 2.18.0
 */
grammar InternalMyCsv;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.MyCsvGrammarAccess;

}

@parser::members {

 	private MyCsvGrammarAccess grammarAccess;

    public InternalMyCsvParser(TokenStream input, MyCsvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Programm";
   	}

   	@Override
   	protected MyCsvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgramm
entryRuleProgramm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgrammRule()); }
	iv_ruleProgramm=ruleProgramm
	{ $current=$iv_ruleProgramm.current; }
	EOF;

// Rule Programm
ruleProgramm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgrammAccess().getStmtsStatementParserRuleCall_0());
			}
			lv_stmts_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgrammRule());
				}
				add(
					$current,
					"stmts",
					lv_stmts_0_0,
					"org.xtext.MyCsv.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getPrimPrimitiveParserRuleCall_0_0());
				}
				lv_prim_0_0=rulePrimitive
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					add(
						$current,
						"prim",
						lv_prim_0_0,
						"org.xtext.MyCsv.Primitive");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getArgsExpressionParserRuleCall_1_0());
				}
				lv_args_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					add(
						$current,
						"args",
						lv_args_1_0,
						"org.xtext.MyCsv.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePrimitive
entryRulePrimitive returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	iv_rulePrimitive=rulePrimitive
	{ $current=$iv_rulePrimitive.current.getText(); }
	EOF;

// Rule Primitive
rulePrimitive returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getLoadParserRuleCall_0());
		}
		this_Load_0=ruleLoad
		{
			$current.merge(this_Load_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getStoreParserRuleCall_1());
		}
		this_Store_1=ruleStore
		{
			$current.merge(this_Store_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getExportJsonParserRuleCall_2());
		}
		this_ExportJson_2=ruleExportJson
		{
			$current.merge(this_ExportJson_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getDeleteParserRuleCall_3());
		}
		this_Delete_3=ruleDelete
		{
			$current.merge(this_Delete_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getInsertParserRuleCall_4());
		}
		this_Insert_4=ruleInsert
		{
			$current.merge(this_Insert_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getModifyParserRuleCall_5());
		}
		this_Modify_5=ruleModify
		{
			$current.merge(this_Modify_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getSelectParserRuleCall_6());
		}
		this_Select_6=ruleSelect
		{
			$current.merge(this_Select_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getProjectParserRuleCall_7());
		}
		this_Project_7=ruleProject
		{
			$current.merge(this_Project_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimitiveAccess().getPrintParserRuleCall_8());
		}
		this_Print_8=rulePrint
		{
			$current.merge(this_Print_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current.getText(); }
	EOF;

// Rule Print
rulePrint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Print'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPrintAccess().getPrintKeyword());
	}
;

// Entry rule entryRuleProject
entryRuleProject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current.getText(); }
	EOF;

// Rule Project
ruleProject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Projection'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getProjectAccess().getProjectionKeyword());
	}
;

// Entry rule entryRuleSelect
entryRuleSelect returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current.getText(); }
	EOF;

// Rule Select
ruleSelect returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Select'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSelectAccess().getSelectKeyword());
	}
;

// Entry rule entryRuleModify
entryRuleModify returns [String current=null]:
	{ newCompositeNode(grammarAccess.getModifyRule()); }
	iv_ruleModify=ruleModify
	{ $current=$iv_ruleModify.current.getText(); }
	EOF;

// Rule Modify
ruleModify returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Modify'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getModifyAccess().getModifyKeyword());
	}
;

// Entry rule entryRuleInsert
entryRuleInsert returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current.getText(); }
	EOF;

// Rule Insert
ruleInsert returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Insert'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getInsertAccess().getInsertKeyword());
	}
;

// Entry rule entryRuleDelete
entryRuleDelete returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current.getText(); }
	EOF;

// Rule Delete
ruleDelete returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Delete'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDeleteAccess().getDeleteKeyword());
	}
;

// Entry rule entryRuleExportJson
entryRuleExportJson returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExportJsonRule()); }
	iv_ruleExportJson=ruleExportJson
	{ $current=$iv_ruleExportJson.current.getText(); }
	EOF;

// Rule ExportJson
ruleExportJson returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='ExportJson'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getExportJsonAccess().getExportJsonKeyword());
	}
;

// Entry rule entryRuleStore
entryRuleStore returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	iv_ruleStore=ruleStore
	{ $current=$iv_ruleStore.current.getText(); }
	EOF;

// Rule Store
ruleStore returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Store'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getStoreAccess().getStoreKeyword());
	}
;

// Entry rule entryRuleLoad
entryRuleLoad returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	iv_ruleLoad=ruleLoad
	{ $current=$iv_ruleLoad.current.getText(); }
	EOF;

// Rule Load
ruleLoad returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='Load'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLoadAccess().getLoadKeyword());
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getUnaryOpParserRuleCall_0_0());
			}
			ruleUnaryOp
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getArgExpressionParserRuleCall_0_1_0());
					}
					lv_arg_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_1_0,
							"org.xtext.MyCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getLhsExpressionParserRuleCall_1_1_0());
					}
					lv_lhs_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_3_0,
							"org.xtext.MyCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getBinOpParserRuleCall_1_2());
			}
			ruleBinOp
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_3_0());
					}
					lv_rhs_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_5_0,
							"org.xtext.MyCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getAggregatParserRuleCall_2_0());
			}
			ruleAggregat
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getArgFieldParserRuleCall_2_1_0());
					}
					lv_arg_8_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"arg",
							lv_arg_8_0,
							"org.xtext.MyCsv.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getConstParserRuleCall_3());
		}
		this_Const_9=ruleConst
		{
			$current = $this_Const_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFieldParserRuleCall_4());
		}
		this_Field_10=ruleField
		{
			$current = $this_Field_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPathParserRuleCall_5());
		}
		this_Path_11=rulePath
		{
			$current = $this_Path_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNbFieldParserRuleCall_6());
		}
		ruleNbField
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_13='['
			{
				newLeafNode(otherlv_13, grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getExpExpressionParserRuleCall_7_1_0());
					}
					lv_exp_14_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"exp",
							lv_exp_14_0,
							"org.xtext.MyCsv.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15=']'
			{
				newLeafNode(otherlv_15, grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_7_2());
			}
		)
	)
;

// Entry rule entryRuleNbField
entryRuleNbField returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNbFieldRule()); }
	iv_ruleNbField=ruleNbField
	{ $current=$iv_ruleNbField.current.getText(); }
	EOF;

// Rule NbField
ruleNbField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NbField'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNbFieldAccess().getNbFieldKeyword());
	}
;

// Entry rule entryRulePath
entryRulePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current; }
	EOF;

// Rule Path
rulePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPathRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getConstAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBinOp
entryRuleBinOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinOpRule()); }
	iv_ruleBinOp=ruleBinOp
	{ $current=$iv_ruleBinOp.current.getText(); }
	EOF;

// Rule BinOp
ruleBinOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getEqualsSignKeyword_2());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getLessThanSignKeyword_3());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinOpAccess().getLessThanSignEqualsSignKeyword_4());
		}
	)
;

// Entry rule entryRuleAggregat
entryRuleAggregat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAggregatRule()); }
	iv_ruleAggregat=ruleAggregat
	{ $current=$iv_ruleAggregat.current.getText(); }
	EOF;

// Rule Aggregat
ruleAggregat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Count'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAggregatAccess().getCountKeyword_0());
		}
		    |
		kw='Sum'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAggregatAccess().getSumKeyword_1());
		}
	)
;

// Entry rule entryRuleUnaryOp
entryRuleUnaryOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOpRule()); }
	iv_ruleUnaryOp=ruleUnaryOp
	{ $current=$iv_ruleUnaryOp.current.getText(); }
	EOF;

// Rule UnaryOp
ruleUnaryOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOpAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw='Not'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOpAccess().getNotKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
