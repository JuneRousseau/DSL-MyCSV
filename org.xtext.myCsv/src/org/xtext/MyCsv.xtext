grammar org.xtext.MyCsv with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myCsv "http://www.xtext.org/MyCsv"

// Program
Program:
	stmts+=Statement+
;

// Useful indexes in CSV world
LineIndex:
	LineIndexCond | LineIndexNum
;
LineIndexCond:
	cond=ExpressionLog
;
LineIndexNum:
	lines+=INT+
;

FieldIndex:
	FieldIndexName | FieldIndexNum
;
FieldIndexName:
	fields+=Field+
;
FieldIndexNum:
	columns+=INT+
;

CellIndex:
	'(' line=INT ',' (colnum=INT | colname=Field) ')'
;

// Common arguments
Value:
	ExpressionCalcul |
	LitteralString
;
Values:
	('[')? values+=Value (';' values+=Value)* (']')?
;
Path:
	value=STRING
;
Field:
	value=ID
	// /!\ We don't accept numbers as Field names.
;

// Statements and primitives
Statement:
	  Load
	| Store
	| ExportJson
	| Projection
	| Select
	| Delete
	| Insert
	| Modify
	| Print
;

Load:
	'Load' path=Path (sepDefined?='sep' '=' sep=STRING)? (noHeader?='noheader')?
;
Store:
	'Store' path=Path (sepDefined?='sep' '=' sep=STRING)?
;
ExportJson:
	'ExportJson' path=Path
;
Projection:
	'Projection' field=FieldIndex
;
Select:
	'Select' line=LineIndex
;

Delete:
	'Delete' (
		DeleteLine |
		DeleteField
	)
;
DeleteLine :
	'line' lines=LineIndex
;
DeleteField:
	'field' fields=FieldIndex
;
Insert:
	'Insert' (
		InsertLine |
		InsertField
	)
;
InsertLine:
	'line' values=Values
;
InsertField:
	 'field' fieldname=Field ':' values=Values
;
Modify:
	'Modify' (
		ModifyLine |
		ModifyField |
		ModifyCell
	)
;
ModifyLine:
	'line' lines=LineIndex 'with' values=Values
;
ModifyField:
	'field' fields=FieldIndex 'with' values=Values
;
ModifyCell:
	'cell' cell=CellIndex 'with' value=Value
;
Print:
	'Print' (PrintLine |
			PrintField |
			PrintCell |
			{PrintTable} PrintTable |
			PrintExpr
		)
;
PrintLine:
	'line' lines=LineIndex
;
PrintField:
	'field' fields=FieldIndex
;
PrintCell:
	'cell' cell=CellIndex
;
PrintTable:
	'table'
;
PrintExpr:
	'expr' exp=Value
;


// Logical expressions
ExpressionLog:
	expr=OrExpression
;
OrExpression:
	lhs=AndExpression ('or' rhs+=AndExpression)*
;
AndExpression:
	lhs=UnaryLogExpression ('and' rhs+=UnaryLogExpression)*
;
UnaryLogExpression:
	(not?='not')? expr=ExpressionLogPrimary
;
ExpressionLogPrimary:
	ExpressionRel | NestedLogExpression
;
NestedLogExpression:
	'(' expr=ExpressionLog ')'
;

// Bridge between logical and numerical expressions
ExpressionRel:
	field=Field op=BinOpRel val=Value
;
enum BinOpRel:
	gt='>'  |
	lt='<'  |
	ge='>=' |
	le='<=' |
	eq='==' |
	neq='!='
;

// Numerical expressions
ExpressionCalcul:
	expr=AdditiveExpression
;
AdditiveExpression:
	lhs=MultiplicativeExpression (rhs+=AdditiveExpressionRhs)*
;
AdditiveExpressionRhs:
	op=BinOpAdd rhs=MultiplicativeExpression
;
MultiplicativeExpression:
	lhs=UnaryExpression (rhs+=MultiplicativeExpressionRhs)*
;
MultiplicativeExpressionRhs:
	op=BinOpMult rhs=UnaryExpression
;
UnaryExpression:
	(op?='-')? expr=ExpressionCalculPrimary
;
ExpressionCalculPrimary:
	{NbField} NbField |
	AggregatExpression |
	LitteralInt |
	LitteralFloat |
	NestedExpressionCalcul
;

AggregatExpression:
	aggregatOp=Aggregat arg=Field
;
LitteralInt:
	val=INT
;
LitteralFloat:
	val=FLOAT
;
LitteralString:
	val=STRING
;
NestedExpressionCalcul:
	'(' expr=ExpressionCalcul ')'
;

enum Aggregat:
	count='Count' |
	sum='Sum' |
	product='Product' |
	mean='Mean'
;
enum BinOpAdd:
	plus='+' |
	minus='-'
;
enum BinOpMult:
	times='*' |
	div='/'
;

NbField:
	'NbField'
;

FLOAT returns ecore::EFloat:
	INT '.' INT
;
