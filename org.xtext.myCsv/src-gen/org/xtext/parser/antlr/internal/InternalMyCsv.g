/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyCsv;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.MyCsvGrammarAccess;

}

@parser::members {

 	private MyCsvGrammarAccess grammarAccess;

    public InternalMyCsvParser(TokenStream input, MyCsvGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MyCsvGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getStmtsStatementParserRuleCall_0());
			}
			lv_stmts_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				add(
					$current,
					"stmts",
					lv_stmts_0_0,
					"org.xtext.MyCsv.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleLineIndex
entryRuleLineIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineIndexRule()); }
	iv_ruleLineIndex=ruleLineIndex
	{ $current=$iv_ruleLineIndex.current; }
	EOF;

// Rule LineIndex
ruleLineIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLineIndexAccess().getLineIndexCondParserRuleCall_0());
		}
		this_LineIndexCond_0=ruleLineIndexCond
		{
			$current = $this_LineIndexCond_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLineIndexAccess().getLineIndexNumParserRuleCall_1());
		}
		this_LineIndexNum_1=ruleLineIndexNum
		{
			$current = $this_LineIndexNum_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLineIndexCond
entryRuleLineIndexCond returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineIndexCondRule()); }
	iv_ruleLineIndexCond=ruleLineIndexCond
	{ $current=$iv_ruleLineIndexCond.current; }
	EOF;

// Rule LineIndexCond
ruleLineIndexCond returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLineIndexCondAccess().getCondExpressionLogParserRuleCall_0());
			}
			lv_cond_0_0=ruleExpressionLog
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLineIndexCondRule());
				}
				set(
					$current,
					"cond",
					lv_cond_0_0,
					"org.xtext.MyCsv.ExpressionLog");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLineIndexNum
entryRuleLineIndexNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineIndexNumRule()); }
	iv_ruleLineIndexNum=ruleLineIndexNum
	{ $current=$iv_ruleLineIndexNum.current; }
	EOF;

// Rule LineIndexNum
ruleLineIndexNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_lines_0_0=RULE_INT
			{
				newLeafNode(lv_lines_0_0, grammarAccess.getLineIndexNumAccess().getLinesINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLineIndexNumRule());
				}
				addWithLastConsumed(
					$current,
					"lines",
					lv_lines_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)+
;

// Entry rule entryRuleFieldIndex
entryRuleFieldIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldIndexRule()); }
	iv_ruleFieldIndex=ruleFieldIndex
	{ $current=$iv_ruleFieldIndex.current; }
	EOF;

// Rule FieldIndex
ruleFieldIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFieldIndexAccess().getFieldIndexNameParserRuleCall_0());
		}
		this_FieldIndexName_0=ruleFieldIndexName
		{
			$current = $this_FieldIndexName_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFieldIndexAccess().getFieldIndexNumParserRuleCall_1());
		}
		this_FieldIndexNum_1=ruleFieldIndexNum
		{
			$current = $this_FieldIndexNum_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFieldIndexName
entryRuleFieldIndexName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldIndexNameRule()); }
	iv_ruleFieldIndexName=ruleFieldIndexName
	{ $current=$iv_ruleFieldIndexName.current; }
	EOF;

// Rule FieldIndexName
ruleFieldIndexName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFieldIndexNameAccess().getFieldsFieldParserRuleCall_0());
			}
			lv_fields_0_0=ruleField
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFieldIndexNameRule());
				}
				add(
					$current,
					"fields",
					lv_fields_0_0,
					"org.xtext.MyCsv.Field");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleFieldIndexNum
entryRuleFieldIndexNum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldIndexNumRule()); }
	iv_ruleFieldIndexNum=ruleFieldIndexNum
	{ $current=$iv_ruleFieldIndexNum.current; }
	EOF;

// Rule FieldIndexNum
ruleFieldIndexNum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_columns_0_0=RULE_INT
			{
				newLeafNode(lv_columns_0_0, grammarAccess.getFieldIndexNumAccess().getColumnsINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldIndexNumRule());
				}
				addWithLastConsumed(
					$current,
					"columns",
					lv_columns_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)+
;

// Entry rule entryRuleCellIndex
entryRuleCellIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCellIndexRule()); }
	iv_ruleCellIndex=ruleCellIndex
	{ $current=$iv_ruleCellIndex.current; }
	EOF;

// Rule CellIndex
ruleCellIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCellIndexAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_line_1_0=RULE_INT
				{
					newLeafNode(lv_line_1_0, grammarAccess.getCellIndexAccess().getLineINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCellIndexRule());
					}
					setWithLastConsumed(
						$current,
						"line",
						lv_line_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getCellIndexAccess().getCommaKeyword_2());
		}
		(
			(
				(
					lv_colnum_3_0=RULE_INT
					{
						newLeafNode(lv_colnum_3_0, grammarAccess.getCellIndexAccess().getColnumINTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCellIndexRule());
						}
						setWithLastConsumed(
							$current,
							"colnum",
							lv_colnum_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCellIndexAccess().getColnameFieldParserRuleCall_3_1_0());
					}
					lv_colname_4_0=ruleField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCellIndexRule());
						}
						set(
							$current,
							"colname",
							lv_colname_4_0,
							"org.xtext.MyCsv.Field");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCellIndexAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getExpressionCalculParserRuleCall_0());
		}
		this_ExpressionCalcul_0=ruleExpressionCalcul
		{
			$current = $this_ExpressionCalcul_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getLitteralStringParserRuleCall_1());
		}
		this_LitteralString_1=ruleLitteralString
		{
			$current = $this_LitteralString_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValues
entryRuleValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValuesRule()); }
	iv_ruleValues=ruleValues
	{ $current=$iv_ruleValues.current; }
	EOF;

// Rule Values
ruleValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getValuesAccess().getLeftSquareBracketKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_1_0());
				}
				lv_values_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValuesRule());
					}
					add(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.MyCsv.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getValuesAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValuesAccess().getValuesValueParserRuleCall_2_1_0());
					}
					lv_values_3_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValuesRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.xtext.MyCsv.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getValuesAccess().getRightSquareBracketKeyword_3());
			}
		)?
	)
;

// Entry rule entryRulePath
entryRulePath returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPathRule()); }
	iv_rulePath=rulePath
	{ $current=$iv_rulePath.current; }
	EOF;

// Rule Path
rulePath returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getPathAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPathRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getFieldAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFieldRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoadParserRuleCall_0());
		}
		this_Load_0=ruleLoad
		{
			$current = $this_Load_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStoreParserRuleCall_1());
		}
		this_Store_1=ruleStore
		{
			$current = $this_Store_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExportJsonParserRuleCall_2());
		}
		this_ExportJson_2=ruleExportJson
		{
			$current = $this_ExportJson_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getProjectionParserRuleCall_3());
		}
		this_Projection_3=ruleProjection
		{
			$current = $this_Projection_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectParserRuleCall_4());
		}
		this_Select_4=ruleSelect
		{
			$current = $this_Select_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeleteParserRuleCall_5());
		}
		this_Delete_5=ruleDelete
		{
			$current = $this_Delete_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInsertParserRuleCall_6());
		}
		this_Insert_6=ruleInsert
		{
			$current = $this_Insert_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getModifyParserRuleCall_7());
		}
		this_Modify_7=ruleModify
		{
			$current = $this_Modify_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPrintParserRuleCall_8());
		}
		this_Print_8=rulePrint
		{
			$current = $this_Print_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRenameFieldParserRuleCall_9());
		}
		this_RenameField_9=ruleRenameField
		{
			$current = $this_RenameField_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	iv_ruleLoad=ruleLoad
	{ $current=$iv_ruleLoad.current; }
	EOF;

// Rule Load
ruleLoad returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Load'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLoadKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoadAccess().getPathPathParserRuleCall_1_0());
				}
				lv_path_1_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoadRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"org.xtext.MyCsv.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_sepDefined_2_0='sep'
					{
						newLeafNode(lv_sepDefined_2_0, grammarAccess.getLoadAccess().getSepDefinedSepKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoadRule());
						}
						setWithLastConsumed($current, "sepDefined", lv_sepDefined_2_0 != null, "sep");
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getLoadAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_sep_4_0=RULE_STRING
					{
						newLeafNode(lv_sep_4_0, grammarAccess.getLoadAccess().getSepSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoadRule());
						}
						setWithLastConsumed(
							$current,
							"sep",
							lv_sep_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			(
				(
					lv_noHeader_5_0='no'
					{
						newLeafNode(lv_noHeader_5_0, grammarAccess.getLoadAccess().getNoHeaderNoKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLoadRule());
						}
						setWithLastConsumed($current, "noHeader", lv_noHeader_5_0 != null, "no");
					}
				)
			)
			otherlv_6='header'
			{
				newLeafNode(otherlv_6, grammarAccess.getLoadAccess().getHeaderKeyword_3_1());
			}
		)?
	)
;

// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	iv_ruleStore=ruleStore
	{ $current=$iv_ruleStore.current; }
	EOF;

// Rule Store
ruleStore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Store'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoreAccess().getStoreKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStoreAccess().getPathPathParserRuleCall_1_0());
				}
				lv_path_1_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoreRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"org.xtext.MyCsv.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_sepDefined_2_0='sep'
					{
						newLeafNode(lv_sepDefined_2_0, grammarAccess.getStoreAccess().getSepDefinedSepKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStoreRule());
						}
						setWithLastConsumed($current, "sepDefined", lv_sepDefined_2_0 != null, "sep");
					}
				)
			)
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getStoreAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_sep_4_0=RULE_STRING
					{
						newLeafNode(lv_sep_4_0, grammarAccess.getStoreAccess().getSepSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStoreRule());
						}
						setWithLastConsumed(
							$current,
							"sep",
							lv_sep_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		(
			(
				(
					lv_noHeader_5_0='no'
					{
						newLeafNode(lv_noHeader_5_0, grammarAccess.getStoreAccess().getNoHeaderNoKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStoreRule());
						}
						setWithLastConsumed($current, "noHeader", lv_noHeader_5_0 != null, "no");
					}
				)
			)
			otherlv_6='header'
			{
				newLeafNode(otherlv_6, grammarAccess.getStoreAccess().getHeaderKeyword_3_1());
			}
		)?
	)
;

// Entry rule entryRuleExportJson
entryRuleExportJson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportJsonRule()); }
	iv_ruleExportJson=ruleExportJson
	{ $current=$iv_ruleExportJson.current; }
	EOF;

// Rule ExportJson
ruleExportJson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ExportJson'
		{
			newLeafNode(otherlv_0, grammarAccess.getExportJsonAccess().getExportJsonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExportJsonAccess().getPathPathParserRuleCall_1_0());
				}
				lv_path_1_0=rulePath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExportJsonRule());
					}
					set(
						$current,
						"path",
						lv_path_1_0,
						"org.xtext.MyCsv.Path");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProjection
entryRuleProjection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectionRule()); }
	iv_ruleProjection=ruleProjection
	{ $current=$iv_ruleProjection.current; }
	EOF;

// Rule Projection
ruleProjection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Projection'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectionAccess().getProjectionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectionAccess().getFieldFieldIndexParserRuleCall_1_0());
				}
				lv_field_1_0=ruleFieldIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectionRule());
					}
					set(
						$current,
						"field",
						lv_field_1_0,
						"org.xtext.MyCsv.FieldIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAccess().getLineLineIndexParserRuleCall_1_0());
				}
				lv_line_1_0=ruleLineIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectRule());
					}
					set(
						$current,
						"line",
						lv_line_1_0,
						"org.xtext.MyCsv.LineIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDelete
entryRuleDelete returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteRule()); }
	iv_ruleDelete=ruleDelete
	{ $current=$iv_ruleDelete.current; }
	EOF;

// Rule Delete
ruleDelete returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteAccess().getDeleteKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getDeleteAccess().getDeleteLineParserRuleCall_1_0());
			}
			this_DeleteLine_1=ruleDeleteLine
			{
				$current = $this_DeleteLine_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getDeleteAccess().getDeleteFieldParserRuleCall_1_1());
			}
			this_DeleteField_2=ruleDeleteField
			{
				$current = $this_DeleteField_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDeleteLine
entryRuleDeleteLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteLineRule()); }
	iv_ruleDeleteLine=ruleDeleteLine
	{ $current=$iv_ruleDeleteLine.current; }
	EOF;

// Rule DeleteLine
ruleDeleteLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='line'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteLineAccess().getLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteLineAccess().getLinesLineIndexParserRuleCall_1_0());
				}
				lv_lines_1_0=ruleLineIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteLineRule());
					}
					set(
						$current,
						"lines",
						lv_lines_1_0,
						"org.xtext.MyCsv.LineIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeleteField
entryRuleDeleteField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteFieldRule()); }
	iv_ruleDeleteField=ruleDeleteField
	{ $current=$iv_ruleDeleteField.current; }
	EOF;

// Rule DeleteField
ruleDeleteField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteFieldAccess().getFieldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteFieldAccess().getFieldsFieldIndexParserRuleCall_1_0());
				}
				lv_fields_1_0=ruleFieldIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteFieldRule());
					}
					set(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.MyCsv.FieldIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getInsertKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getInsertAccess().getInsertLineParserRuleCall_1_0());
			}
			this_InsertLine_1=ruleInsertLine
			{
				$current = $this_InsertLine_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInsertAccess().getInsertFieldParserRuleCall_1_1());
			}
			this_InsertField_2=ruleInsertField
			{
				$current = $this_InsertField_2.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleInsertLine
entryRuleInsertLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertLineRule()); }
	iv_ruleInsertLine=ruleInsertLine
	{ $current=$iv_ruleInsertLine.current; }
	EOF;

// Rule InsertLine
ruleInsertLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='line'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertLineAccess().getLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertLineAccess().getValuesValuesParserRuleCall_1_0());
				}
				lv_values_1_0=ruleValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertLineRule());
					}
					set(
						$current,
						"values",
						lv_values_1_0,
						"org.xtext.MyCsv.Values");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInsertField
entryRuleInsertField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertFieldRule()); }
	iv_ruleInsertField=ruleInsertField
	{ $current=$iv_ruleInsertField.current; }
	EOF;

// Rule InsertField
ruleInsertField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertFieldAccess().getFieldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertFieldAccess().getFieldnameFieldParserRuleCall_1_0());
				}
				lv_fieldname_1_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertFieldRule());
					}
					set(
						$current,
						"fieldname",
						lv_fieldname_1_0,
						"org.xtext.MyCsv.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertFieldAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInsertFieldAccess().getValuesValuesParserRuleCall_3_0());
				}
				lv_values_3_0=ruleValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInsertFieldRule());
					}
					set(
						$current,
						"values",
						lv_values_3_0,
						"org.xtext.MyCsv.Values");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModify
entryRuleModify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyRule()); }
	iv_ruleModify=ruleModify
	{ $current=$iv_ruleModify.current; }
	EOF;

// Rule Modify
ruleModify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Modify'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifyAccess().getModifyKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getModifyAccess().getModifyLineParserRuleCall_1_0());
			}
			this_ModifyLine_1=ruleModifyLine
			{
				$current = $this_ModifyLine_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModifyAccess().getModifyFieldParserRuleCall_1_1());
			}
			this_ModifyField_2=ruleModifyField
			{
				$current = $this_ModifyField_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getModifyAccess().getModifyCellParserRuleCall_1_2());
			}
			this_ModifyCell_3=ruleModifyCell
			{
				$current = $this_ModifyCell_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleModifyLine
entryRuleModifyLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyLineRule()); }
	iv_ruleModifyLine=ruleModifyLine
	{ $current=$iv_ruleModifyLine.current; }
	EOF;

// Rule ModifyLine
ruleModifyLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='line'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifyLineAccess().getLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyLineAccess().getLinesLineIndexParserRuleCall_1_0());
				}
				lv_lines_1_0=ruleLineIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyLineRule());
					}
					set(
						$current,
						"lines",
						lv_lines_1_0,
						"org.xtext.MyCsv.LineIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getModifyLineAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyLineAccess().getValuesValuesParserRuleCall_3_0());
				}
				lv_values_3_0=ruleValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyLineRule());
					}
					set(
						$current,
						"values",
						lv_values_3_0,
						"org.xtext.MyCsv.Values");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModifyField
entryRuleModifyField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyFieldRule()); }
	iv_ruleModifyField=ruleModifyField
	{ $current=$iv_ruleModifyField.current; }
	EOF;

// Rule ModifyField
ruleModifyField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifyFieldAccess().getFieldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyFieldAccess().getFieldsFieldIndexParserRuleCall_1_0());
				}
				lv_fields_1_0=ruleFieldIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyFieldRule());
					}
					set(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.MyCsv.FieldIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getModifyFieldAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyFieldAccess().getValuesValuesParserRuleCall_3_0());
				}
				lv_values_3_0=ruleValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyFieldRule());
					}
					set(
						$current,
						"values",
						lv_values_3_0,
						"org.xtext.MyCsv.Values");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModifyCell
entryRuleModifyCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyCellRule()); }
	iv_ruleModifyCell=ruleModifyCell
	{ $current=$iv_ruleModifyCell.current; }
	EOF;

// Rule ModifyCell
ruleModifyCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cell'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifyCellAccess().getCellKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyCellAccess().getCellCellIndexParserRuleCall_1_0());
				}
				lv_cell_1_0=ruleCellIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyCellRule());
					}
					set(
						$current,
						"cell",
						lv_cell_1_0,
						"org.xtext.MyCsv.CellIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getModifyCellAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifyCellAccess().getValueValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifyCellRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.MyCsv.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Print'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getPrintAccess().getPrintLineParserRuleCall_1_0());
			}
			this_PrintLine_1=rulePrintLine
			{
				$current = $this_PrintLine_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPrintAccess().getPrintFieldParserRuleCall_1_1());
			}
			this_PrintField_2=rulePrintField
			{
				$current = $this_PrintField_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPrintAccess().getPrintCellParserRuleCall_1_2());
			}
			this_PrintCell_3=rulePrintCell
			{
				$current = $this_PrintCell_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getPrintAccess().getPrintTableAction_1_3_0(),
							$current);
					}
				)
				{
					newCompositeNode(grammarAccess.getPrintAccess().getPrintTableParserRuleCall_1_3_1());
				}
				rulePrintTable
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getPrintAccess().getPrintExprParserRuleCall_1_4());
			}
			this_PrintExpr_6=rulePrintExpr
			{
				$current = $this_PrintExpr_6.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePrintLine
entryRulePrintLine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintLineRule()); }
	iv_rulePrintLine=rulePrintLine
	{ $current=$iv_rulePrintLine.current; }
	EOF;

// Rule PrintLine
rulePrintLine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='line'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintLineAccess().getLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintLineAccess().getLinesLineIndexParserRuleCall_1_0());
				}
				lv_lines_1_0=ruleLineIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintLineRule());
					}
					set(
						$current,
						"lines",
						lv_lines_1_0,
						"org.xtext.MyCsv.LineIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrintField
entryRulePrintField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintFieldRule()); }
	iv_rulePrintField=rulePrintField
	{ $current=$iv_rulePrintField.current; }
	EOF;

// Rule PrintField
rulePrintField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='field'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintFieldAccess().getFieldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintFieldAccess().getFieldsFieldIndexParserRuleCall_1_0());
				}
				lv_fields_1_0=ruleFieldIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintFieldRule());
					}
					set(
						$current,
						"fields",
						lv_fields_1_0,
						"org.xtext.MyCsv.FieldIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrintCell
entryRulePrintCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintCellRule()); }
	iv_rulePrintCell=rulePrintCell
	{ $current=$iv_rulePrintCell.current; }
	EOF;

// Rule PrintCell
rulePrintCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cell'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintCellAccess().getCellKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintCellAccess().getCellCellIndexParserRuleCall_1_0());
				}
				lv_cell_1_0=ruleCellIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintCellRule());
					}
					set(
						$current,
						"cell",
						lv_cell_1_0,
						"org.xtext.MyCsv.CellIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrintTable
entryRulePrintTable returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrintTableRule()); }
	iv_rulePrintTable=rulePrintTable
	{ $current=$iv_rulePrintTable.current.getText(); }
	EOF;

// Rule PrintTable
rulePrintTable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='table'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPrintTableAccess().getTableKeyword());
	}
;

// Entry rule entryRulePrintExpr
entryRulePrintExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintExprRule()); }
	iv_rulePrintExpr=rulePrintExpr
	{ $current=$iv_rulePrintExpr.current; }
	EOF;

// Rule PrintExpr
rulePrintExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='expr'
		{
			newLeafNode(otherlv_0, grammarAccess.getPrintExprAccess().getExprKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPrintExprAccess().getExpValueParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrintExprRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"org.xtext.MyCsv.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRenameField
entryRuleRenameField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRenameFieldRule()); }
	iv_ruleRenameField=ruleRenameField
	{ $current=$iv_ruleRenameField.current; }
	EOF;

// Rule RenameField
ruleRenameField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rename'
		{
			newLeafNode(otherlv_0, grammarAccess.getRenameFieldAccess().getRenameKeyword_0());
		}
		otherlv_1='field'
		{
			newLeafNode(otherlv_1, grammarAccess.getRenameFieldAccess().getFieldKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRenameFieldAccess().getLast_fieldFieldParserRuleCall_2_0());
				}
				lv_last_field_2_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRenameFieldRule());
					}
					set(
						$current,
						"last_field",
						lv_last_field_2_0,
						"org.xtext.MyCsv.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':='
		{
			newLeafNode(otherlv_3, grammarAccess.getRenameFieldAccess().getColonEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRenameFieldAccess().getNew_fieldFieldParserRuleCall_4_0());
				}
				lv_new_field_4_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRenameFieldRule());
					}
					set(
						$current,
						"new_field",
						lv_new_field_4_0,
						"org.xtext.MyCsv.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLog
entryRuleExpressionLog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLogRule()); }
	iv_ruleExpressionLog=ruleExpressionLog
	{ $current=$iv_ruleExpressionLog.current; }
	EOF;

// Rule ExpressionLog
ruleExpressionLog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionLogAccess().getExprOrExpressionParserRuleCall_0());
			}
			lv_expr_0_0=ruleOrExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionLogRule());
				}
				set(
					$current,
					"expr",
					lv_expr_0_0,
					"org.xtext.MyCsv.OrExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrExpressionAccess().getLhsAndExpressionParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleAndExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.MyCsv.AndExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrExpressionAccess().getOrKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_1_0());
					}
					lv_rhs_2_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						add(
							$current,
							"rhs",
							lv_rhs_2_0,
							"org.xtext.MyCsv.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndExpressionAccess().getLhsUnaryLogExpressionParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleUnaryLogExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.MyCsv.UnaryLogExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='and'
			{
				newLeafNode(otherlv_1, grammarAccess.getAndExpressionAccess().getAndKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRhsUnaryLogExpressionParserRuleCall_1_1_0());
					}
					lv_rhs_2_0=ruleUnaryLogExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						add(
							$current,
							"rhs",
							lv_rhs_2_0,
							"org.xtext.MyCsv.UnaryLogExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryLogExpression
entryRuleUnaryLogExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryLogExpressionRule()); }
	iv_ruleUnaryLogExpression=ruleUnaryLogExpression
	{ $current=$iv_ruleUnaryLogExpression.current; }
	EOF;

// Rule UnaryLogExpression
ruleUnaryLogExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_not_0_0='not'
				{
					newLeafNode(lv_not_0_0, grammarAccess.getUnaryLogExpressionAccess().getNotNotKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryLogExpressionRule());
					}
					setWithLastConsumed($current, "not", lv_not_0_0 != null, "not");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryLogExpressionAccess().getExprExpressionLogPrimaryParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpressionLogPrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryLogExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.MyCsv.ExpressionLogPrimary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionLogPrimary
entryRuleExpressionLogPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionLogPrimaryRule()); }
	iv_ruleExpressionLogPrimary=ruleExpressionLogPrimary
	{ $current=$iv_ruleExpressionLogPrimary.current; }
	EOF;

// Rule ExpressionLogPrimary
ruleExpressionLogPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionLogPrimaryAccess().getExpressionRelParserRuleCall_0());
		}
		this_ExpressionRel_0=ruleExpressionRel
		{
			$current = $this_ExpressionRel_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionLogPrimaryAccess().getNestedLogExpressionParserRuleCall_1());
		}
		this_NestedLogExpression_1=ruleNestedLogExpression
		{
			$current = $this_NestedLogExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNestedLogExpression
entryRuleNestedLogExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedLogExpressionRule()); }
	iv_ruleNestedLogExpression=ruleNestedLogExpression
	{ $current=$iv_ruleNestedLogExpression.current; }
	EOF;

// Rule NestedLogExpression
ruleNestedLogExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getNestedLogExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedLogExpressionAccess().getExprExpressionLogParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpressionLog
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedLogExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.MyCsv.ExpressionLog");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getNestedLogExpressionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleExpressionRel
entryRuleExpressionRel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRelRule()); }
	iv_ruleExpressionRel=ruleExpressionRel
	{ $current=$iv_ruleExpressionRel.current; }
	EOF;

// Rule ExpressionRel
ruleExpressionRel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionRelAccess().getFieldFieldParserRuleCall_0_0());
				}
				lv_field_0_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRelRule());
					}
					set(
						$current,
						"field",
						lv_field_0_0,
						"org.xtext.MyCsv.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionRelAccess().getOpBinOpRelEnumRuleCall_1_0());
				}
				lv_op_1_0=ruleBinOpRel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRelRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"org.xtext.MyCsv.BinOpRel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionRelAccess().getValValueParserRuleCall_2_0());
				}
				lv_val_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRelRule());
					}
					set(
						$current,
						"val",
						lv_val_2_0,
						"org.xtext.MyCsv.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionCalcul
entryRuleExpressionCalcul returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionCalculRule()); }
	iv_ruleExpressionCalcul=ruleExpressionCalcul
	{ $current=$iv_ruleExpressionCalcul.current; }
	EOF;

// Rule ExpressionCalcul
ruleExpressionCalcul returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionCalculAccess().getExprAdditiveExpressionParserRuleCall_0());
			}
			lv_expr_0_0=ruleAdditiveExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionCalculRule());
				}
				set(
					$current,
					"expr",
					lv_expr_0_0,
					"org.xtext.MyCsv.AdditiveExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getLhsMultiplicativeExpressionParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.MyCsv.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRhsAdditiveExpressionRhsParserRuleCall_1_0());
				}
				lv_rhs_1_0=ruleAdditiveExpressionRhs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
					}
					add(
						$current,
						"rhs",
						lv_rhs_1_0,
						"org.xtext.MyCsv.AdditiveExpressionRhs");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExpressionRhs
entryRuleAdditiveExpressionRhs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRhsRule()); }
	iv_ruleAdditiveExpressionRhs=ruleAdditiveExpressionRhs
	{ $current=$iv_ruleAdditiveExpressionRhs.current; }
	EOF;

// Rule AdditiveExpressionRhs
ruleAdditiveExpressionRhs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionRhsAccess().getOpBinOpAddEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleBinOpAdd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRhsRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.MyCsv.BinOpAdd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditiveExpressionRhsAccess().getRhsMultiplicativeExpressionParserRuleCall_1_0());
				}
				lv_rhs_1_0=ruleMultiplicativeExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRhsRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_1_0,
						"org.xtext.MyCsv.MultiplicativeExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getLhsUnaryExpressionParserRuleCall_0_0());
				}
				lv_lhs_0_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_0_0,
						"org.xtext.MyCsv.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRhsMultiplicativeExpressionRhsParserRuleCall_1_0());
				}
				lv_rhs_1_0=ruleMultiplicativeExpressionRhs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
					}
					add(
						$current,
						"rhs",
						lv_rhs_1_0,
						"org.xtext.MyCsv.MultiplicativeExpressionRhs");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpressionRhs
entryRuleMultiplicativeExpressionRhs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRhsRule()); }
	iv_ruleMultiplicativeExpressionRhs=ruleMultiplicativeExpressionRhs
	{ $current=$iv_ruleMultiplicativeExpressionRhs.current; }
	EOF;

// Rule MultiplicativeExpressionRhs
ruleMultiplicativeExpressionRhs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionRhsAccess().getOpBinOpMultEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleBinOpMult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRhsRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"org.xtext.MyCsv.BinOpMult");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicativeExpressionRhsAccess().getRhsUnaryExpressionParserRuleCall_1_0());
				}
				lv_rhs_1_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRhsRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_1_0,
						"org.xtext.MyCsv.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_0='-'
				{
					newLeafNode(lv_op_0_0, grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnaryExpressionRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_0 != null, "-");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprExpressionCalculPrimaryParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpressionCalculPrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.MyCsv.ExpressionCalculPrimary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpressionCalculPrimary
entryRuleExpressionCalculPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionCalculPrimaryRule()); }
	iv_ruleExpressionCalculPrimary=ruleExpressionCalculPrimary
	{ $current=$iv_ruleExpressionCalculPrimary.current; }
	EOF;

// Rule ExpressionCalculPrimary
ruleExpressionCalculPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getExpressionCalculPrimaryAccess().getNbFieldParserRuleCall_0_1());
			}
			ruleNbField
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionCalculPrimaryAccess().getAggregatExpressionParserRuleCall_1());
		}
		this_AggregatExpression_2=ruleAggregatExpression
		{
			$current = $this_AggregatExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralIntParserRuleCall_2());
		}
		this_LitteralInt_3=ruleLitteralInt
		{
			$current = $this_LitteralInt_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionCalculPrimaryAccess().getLitteralFloatParserRuleCall_3());
		}
		this_LitteralFloat_4=ruleLitteralFloat
		{
			$current = $this_LitteralFloat_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionCalculPrimaryAccess().getNestedExpressionCalculParserRuleCall_4());
		}
		this_NestedExpressionCalcul_5=ruleNestedExpressionCalcul
		{
			$current = $this_NestedExpressionCalcul_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAggregatExpression
entryRuleAggregatExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregatExpressionRule()); }
	iv_ruleAggregatExpression=ruleAggregatExpression
	{ $current=$iv_ruleAggregatExpression.current; }
	EOF;

// Rule AggregatExpression
ruleAggregatExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregatExpressionAccess().getAggregatOpAggregatEnumRuleCall_0_0());
				}
				lv_aggregatOp_0_0=ruleAggregat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregatExpressionRule());
					}
					set(
						$current,
						"aggregatOp",
						lv_aggregatOp_0_0,
						"org.xtext.MyCsv.Aggregat");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAggregatExpressionAccess().getArgFieldParserRuleCall_1_0());
				}
				lv_arg_1_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAggregatExpressionRule());
					}
					set(
						$current,
						"arg",
						lv_arg_1_0,
						"org.xtext.MyCsv.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLitteralInt
entryRuleLitteralInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitteralIntRule()); }
	iv_ruleLitteralInt=ruleLitteralInt
	{ $current=$iv_ruleLitteralInt.current; }
	EOF;

// Rule LitteralInt
ruleLitteralInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getLitteralIntAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLitteralIntRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLitteralFloat
entryRuleLitteralFloat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitteralFloatRule()); }
	iv_ruleLitteralFloat=ruleLitteralFloat
	{ $current=$iv_ruleLitteralFloat.current; }
	EOF;

// Rule LitteralFloat
ruleLitteralFloat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLitteralFloatAccess().getValFLOATParserRuleCall_0());
			}
			lv_val_0_0=ruleFLOAT
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLitteralFloatRule());
				}
				set(
					$current,
					"val",
					lv_val_0_0,
					"org.xtext.MyCsv.FLOAT");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLitteralString
entryRuleLitteralString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitteralStringRule()); }
	iv_ruleLitteralString=ruleLitteralString
	{ $current=$iv_ruleLitteralString.current; }
	EOF;

// Rule LitteralString
ruleLitteralString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_STRING
			{
				newLeafNode(lv_val_0_0, grammarAccess.getLitteralStringAccess().getValSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLitteralStringRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleNestedExpressionCalcul
entryRuleNestedExpressionCalcul returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedExpressionCalculRule()); }
	iv_ruleNestedExpressionCalcul=ruleNestedExpressionCalcul
	{ $current=$iv_ruleNestedExpressionCalcul.current; }
	EOF;

// Rule NestedExpressionCalcul
ruleNestedExpressionCalcul returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getNestedExpressionCalculAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedExpressionCalculAccess().getExprExpressionCalculParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpressionCalcul
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedExpressionCalculRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.MyCsv.ExpressionCalcul");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getNestedExpressionCalculAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleNbField
entryRuleNbField returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNbFieldRule()); }
	iv_ruleNbField=ruleNbField
	{ $current=$iv_ruleNbField.current.getText(); }
	EOF;

// Rule NbField
ruleNbField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='NbField'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNbFieldAccess().getNbFieldKeyword());
	}
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Rule BinOpRel
ruleBinOpRel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getBinOpRelAccess().getGtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinOpRelAccess().getGtEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getBinOpRelAccess().getLtEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinOpRelAccess().getLtEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>='
			{
				$current = grammarAccess.getBinOpRelAccess().getGeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getBinOpRelAccess().getGeEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getBinOpRelAccess().getLeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getBinOpRelAccess().getLeEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='=='
			{
				$current = grammarAccess.getBinOpRelAccess().getEqEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getBinOpRelAccess().getEqEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getBinOpRelAccess().getNeqEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getBinOpRelAccess().getNeqEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule Aggregat
ruleAggregat returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Count'
			{
				$current = grammarAccess.getAggregatAccess().getCountEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAggregatAccess().getCountEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Sum'
			{
				$current = grammarAccess.getAggregatAccess().getSumEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAggregatAccess().getSumEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Product'
			{
				$current = grammarAccess.getAggregatAccess().getProductEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAggregatAccess().getProductEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Mean'
			{
				$current = grammarAccess.getAggregatAccess().getMeanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAggregatAccess().getMeanEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule BinOpAdd
ruleBinOpAdd returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getBinOpAddAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinOpAddAccess().getPlusEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getBinOpAddAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinOpAddAccess().getMinusEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BinOpMult
ruleBinOpMult returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getBinOpMultAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBinOpMultAccess().getTimesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getBinOpMultAccess().getDivEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBinOpMultAccess().getDivEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
